<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Mark</title>
    <link>https://abananajuice.github.io/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Mark</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jun 2021 21:36:53 +0800</lastBuildDate><atom:link href="https://abananajuice.github.io/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法笔记5_排序与查找</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B05_%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Fri, 18 Jun 2021 21:36:53 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B05_%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</guid>
      <description>查找 线性（顺序）关系：数据项保存在列表这样的集合中。
  顺序查找：按照顺序来访问和查找数据项；针对无序表当所要找的数据不在表中时查找需要遍历整个列表，而对于有序表可以设置一个提前结束标志减少计算量。但无论是有序表还是无序表其算法复杂度都为O(n)。
  二分查找（binary search）：对于有序表可以从中间项开始匹配，不断缩小表的规模知道找到数据的位置。二分查找法也体现了分治算法。因此二分查找法可以用递归实现。算法复杂度为O(log n)。
def binarySearch(alist,item): #二分查找的递归实现 ...... midpoint = len(alist)//2 if alist[midpoint]==item: return True else: #减小规模，调用自身 if item &amp;lt;alist[midpoint]: return binarySearch(alist[:midpoint],item) else: return binarySearch(alist[midpoint+1:],item)   对于两种查找算法，需要根据实际的应用情况进行选择。
排序   冒泡排序（bubble sort）:两两相邻的数据进行比较，多趟之后即可完成排序。与在c语言中交换两个位置的值需要中间变量不同，python中可以使用alist[i],alist[i+1]=alist[i+1],alist[i]语句完成。算法每趟的比较次数由n-1不断递减，因此算法复杂度为O(n^2)。
冒泡排序常作为其他算法的对比基准（妥妥的工具人🙃），其中的对次比对交换操作时无效的。优势在于无需额外储存空间的开销。
改进的冒泡排序：当某次比对未发生交换，便说明比对完成，可以提前结束。
def shortBubbleSort(alist): ...... exchange = False for i in range(passnum): if alist[i]&amp;gt;alist[i+1]: exchange = True alist[i],alist[i+1]=alist[i+1],alist[i] passnum = passnum-1   选择排序(Selection Sort)：对冒泡算法中,每趟只进行一次交换。先记录最大项所在的位置再交换。
  插入排序（Insertion Sort）:复杂度仍为O(n^2);是中唯持一个已排好序的子列表，其位置始终在列表的前部。并将其逐步扩大只全表。列表越接近有序，插入排序的对比次数就越少。
def insertionSort(alist): .</description>
    </item>
    
    <item>
      <title>算法笔记4_递归Recursion</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B04_%E9%80%92%E5%BD%92recursion/</link>
      <pubDate>Tue, 04 May 2021 20:54:38 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B04_%E9%80%92%E5%BD%92recursion/</guid>
      <description>开头的碎碎念 个人认为，递归算法是一种十分优美的算法。它总是能够用十分短小的代码长度来解决许多复杂的问题。前端实际，在看快速傅里叶变换(FFT)时，看到递归算法仅用极小的代码量即可实现复杂的理论，内心感到十分的震撼。
 将一个分问题不断拆分成更小的相同问题，其在算法上的特点就是调用自身。
 结束条件 减小规模 调用自身  递归调用的实现：函数每次调用将现场数据压入系统调用栈，当函数返回时则从栈顶返回恢复现场。
 现场数据：栈保存的一个函数调用所需要维护的信息。
每次调用，压入栈的现场数据成为栈帧。
 #python中递归深度的设置(默认为1000) import sys sys.getrecursionlimit() sys.setrecursion(3000) 递归的应用  递归数列求和：将问题拆分成两个数相加，当列表长度为1时结束。 0-16任意进制的转换：设置convertstring = &amp;quot;0123456789ABCDEF&amp;quot; 通过除以整除\\进制基base以及对进制基求余数来将整数拆开。当数小于进制基时结束。  convertstring = &amp;#34;0123456789ABCDEF&amp;#34; ...... else: return toStr(n//base,base) + convertstring[n%base] #字符串连接；n//base表示整除   迷宫：在原位置先向北走一步，如果找不到出口则按北南西东的顺序尝试。（这个实际上随意设置也行）；为了防止艳茹无限递归的死循环，需要加入之前的路径。
  找零兑换：求兑换最少数量的硬币
 贪心策略：从允许最多数量最大面值的硬币开始，余额则用下一最大面值硬币尽可能多的数量分解。由此直到到达最小面值或余额为0。为了减少算法中的重复计算，可以将中间结果保存在表中。递归之前查表，直接返回。 2.动态规划法    动态规划 动态规划：从问题的最小规模的最优解开始，逐步扩大问题规模到要解决的问题。
最优化问题能用动态规划解决的必要条件：问题最优解包含和更小规模子问题的最优解。
递归可视化 分形树，谢尔宾斯基三角形，汉诺塔
引用  数据结构与算法Python版_中国大学MOOC(慕课)  </description>
    </item>
    
    <item>
      <title>算法笔记3</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B03/</link>
      <pubDate>Wed, 31 Mar 2021 17:58:45 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B03/</guid>
      <description>队列(queue) 队列的特征：先进先出（FIFO）
队列仅有一个入口和出口。添加数据处为尾端，移除数据处为首端。
队列的操作
如果将list的首端作为队列尾端，list的末端作为队列的首端。enqueue()的复杂度为O(n),dequeue()的复杂度为O(1)。
首位倒过来时复杂度也倒过来
双端队列（deque）:队首和队尾都可以进行加入和移出操作。
无序表(unordered list) 数据的排列不具有顺序性，仅依靠相对位置
利用链表实现无序表 链表的每个节点至少包含：数据项本身，下一节点的引用信息
通过在数据项之间建立链接指向，就可以保持其前后相对位置。 通过链表实现的无序表仅仅包含对于受节点head的引用。
添加(add)：将新的数据项添加至表头，减少算法复杂度。
temp.setNext(self.head) self.head = temp #以上两条语句不能交换位置 链表的查找(search)和长度(size)方法都使用遍历的思想。删除(remove)第n的节点时需要把第n-1个节点指向n+1个节点。因此，要实现该方法需要引用当前节点和上一节点。
有序表(ordered list) 依照某种可比性，决定列表个元素的排序
 对于python，可以适用于所有定义了__gt__方法的数据类型
 查找(search)方法：当遍历到的数据项大于所要查找的数据项，则说明所要查找的元素在链表中不存在。
添加(add)方法：需要引用当前节点和上一节点，将新的元素加入到两者之间。
引用  数据结构与算法Python版_中国大学MOOC(慕课)  </description>
    </item>
    
    <item>
      <title>算法笔记2</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Mon, 04 Jan 2021 13:09:11 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</guid>
      <description>基本数据结构 线性结构（linear structure）  有序数据项的集合 每个数据项都有唯一的前驱和后继（第一个和最后一个除外）  根据数据项增减的方式构成了数据结构
 栈(Stack)&amp;ndash;仅在表尾进行插入和删除操作的线性表 队列(Queue)&amp;ndash;只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作 双端队列(Deque)&amp;ndash;限定插入和删除操作在表的两端进行的线性表 列表(List)&amp;ndash;  栈 进行操作的一端为栈顶，另一端为栈底
栈的特点：后进先出LIFO
栈通过python的实现可以借助list的数据类型
栈的应用 括号匹配&amp;ndash;基本思路 
括号匹配与之前图灵机的模型有些相似；
 括号匹配可以用用于爬虫HTML数据的爬取；另外该方法也可通过正则表达式实现。  十进制与二进制的转换 十进制转换二进制是余数的连续求取，并将求得的余数倒过来书写。通过栈后进先出的特性可以实现。
同时由此可以进行十进制到其他进制的转换。当转换的进制为十一禁进制以上时，可以使用数组来保存其中的字母
digits = &amp;#34;0123456789ABC&amp;#34; 表达式转换 根据表达式操作符的的位置分为中缀、前缀和后缀，距离操作数最近的操作符先执行
  中缀表达式转换为前缀和后缀表达式
将表达式转换为全括号形式，将内部每个运算符移到对应的左括号或右括号处边可以转换为前缀、后缀表达式
  中缀转后缀算法
  从左到右扫描过程中，采用栈来暂存为处理的操作符，当遇到一个新的操作符，就需要跟栈顶的操作符比较下优先级，再行处理。
算法流程
 从左到右扫描
- 当遇到操作数，直接输出至列表末尾
- 当遇到左括号压入栈顶
- 当遇到右括号，反复弹出栈顶加入至输出列表末尾，直到碰到左括号
- 当遇到操作符，与栈顶其他操作符比较。栈顶操作符高于或等于它，则将输出栈顶的操作符直到优先级低于它
 后缀表达式的求值 后缀表达式的操作符在操作数的后面，因此要暂存操作数,直到碰到操作符才进行运算(从这可以利用栈的特性)
在实际运算时，先弹出的时右操作数然后才是左操作数，对于‘-’和‘/’要注意两个操作数的位置
算法流程
  创建空栈用于暂存操作数
  从左到右扫面单词列表
 如果是操作数，压入栈顶 如果是操作符，从栈顶弹出两个操作数，进行计算。（注意操作数的位置）    最后扫描结束后，表达式的值被存在栈顶（如果表达式正确，则栈中仅有最后的结果一个元素）</description>
    </item>
    
    <item>
      <title>算法笔记1</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 04 Jan 2021 13:09:08 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01/</guid>
      <description>算法分析 算法和算法复杂性 可计算的问题：
 what：分类问题——树状判定分支 why： 证明问题——公式序列解决 how： 或称问题——算法流程解决  欧几里得算法的python实现
def alg(a,b): if b==0 : return a print(a) c=a%b alg(b,c) def main(): #a,b为要计算的两个数 a=15 b=9 print(alg(a,b)) main() 计算复杂性研究的是问题的难度，算法实在资源约束的情况下寻找最优方案。
不可计算问题
 停机问题 几乎所有无理数都无法通过算法找出任意一位精确数  程序与算法的区别 算法是描述问题解决的分布步骤而程序则是通过某种编程语言实现的算法。
算法分析主要是从计算机资源消耗的角度来评判和比较算法。评判的两个标准有两种：算法执行时间和空间（内存或存储空间）。
利用python的time库中 time.time()函数可以计算算法的执行时间。
 time.time() 是计算从1970到现在的时长，并将值返回。
 对于算法运行时间的检测也收到语言性能、机器的性能的影响。
大O表示法 一个算法所实施的操作数量或步骤可作为独立于程序/机器的度量指标。
程序设计语言中除与计算资源无关的定义语句外，主要是三种控制流语句和赋值语句。
一个赋值语句包含了（表达式）计算和（变量）存储两个基本资源。而控制流语句仅起组织语句的作用，并不涉及处理。
算法分析的目标是找出问题规模如何影响执行时间
数量级函数 数量级函数描述了T（n）中随着n增加而增加速度最快的主导部分。称作大O表示法记作O(f(n)),其中f(n)表示T(n)中的主导部分。
 T(n)=5n^2+27n+1005
当n越来越大起主导作用的是5*n^2,其中系数5对n^2的增长速度无影响。因此可以表示为O(n^2)
 具体数据也会影响算法运行时间，如排序算法。此时分为最好，最差和平均状况，主要还是通过平均状况分析性能。
大O表示所有上限中最小的那个上限
大Ω表示所有下限中最大的那个下限
如果上下限相同用Θ大表示
变位词  写一个布尔函数，一两个此作为参数，返回两个词是否为变位词
  将每一个单词逐个检查  课程给的代码示例：
def solu1_example(s1,s2): alist = list(s2) pos1 = 0 stillok = True while pos1 &amp;lt; len(s1) and stillok: #只要字符中有一个没找到就可以通过32行退出 pos2 = 0 found =False while pos2 &amp;lt; len(alist) and not found: if s1[pos2] == alist[pos2]: found = True else: pos2 = pos2 + 1 if found: alist[pos2] = None else: stillok = False pos1 = pos1 + 1 return stillok 如果将自己一个一个对比，要注意同一个字符在字符串中可能会出现很多次。因此，在判断是找到一个相同时必须要设置为none</description>
    </item>
    
    <item>
      <title>算法笔记0</title>
      <link>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00/</link>
      <pubDate>Mon, 04 Jan 2021 13:09:05 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00/</guid>
      <description>抽象数据类型（ADT） 是对数据进行处理的一种逻辑描述，并不设计如何实现这些处理。
递归 编写递归代码要注意的三点：
  递归总有一个最简单的情况&amp;mdash;方法的第一条语句总是包含 return 的条件语句。 递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。 递归调用的父问题和尝试解决的子问题之间不应该有交集。   </description>
    </item>
    
    <item>
      <title>Ubuntu笔记</title>
      <link>https://abananajuice.github.io/p/ubuntu%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 30 Jun 2019 11:00:55 +0800</pubDate>
      
      <guid>https://abananajuice.github.io/p/ubuntu%E7%AC%94%E8%AE%B0/</guid>
      <description>这篇笔记会根据情况隔段时间更新一次
 终端操作  cd+文件夹名 进入文件夹 可以使用TAB键进行自动补全或选择 cd ..( 退出几层就加几个..) 退出到上n层路径
ls 显示文件夹中的目录
pwd 显示当前路径
gedit 使用文本编辑器编辑文件
cat 在终端中查看文件（多用做文本文件）
sudo 进入管理员模式（超级用户)
sudo su 进入根用户
nvidia-smi 查看显卡运行状态（A卡没有试过）
 在ubuntu中一些文件被写保护，需要更高级权限才能修改，可以在命令前加sudo
复制一个文件到指定目录  (1) 在桌面上打开终端，输入sudo su
(2) 输入密码，就切换到root用户下
(3) 切换到桌面 命令输入为 cd 桌面
(4) 然后输入复制命令行 cp -r studio.zip /home/androidstudio
(5) 回车 大功告成 可以看看/home/androidstudio目录下是否有studio.zip
 作者：飞奔的小付
来源：CSDN
原文
移动文件（假设现在在该文件的目录下）
 sudo mv xxx.xx 新的位置的路径
 解压文件
 sudo unzip opencv-3.3.0.zip
 重命名文件
 sudo cp 原文件名 新文件名</description>
    </item>
    
  </channel>
</rss>
