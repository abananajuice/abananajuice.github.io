[{"content":"基本数据结构 线性结构（linear structure）  有序数据项的集合 每个数据项都有唯一的前驱和后继（第一个和最后一个除外）  根据数据项增减的方式构成了数据结构\n 栈(Stack)\u0026ndash;仅在表尾进行插入和删除操作的线性表 队列(Queue)\u0026ndash;只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作 双端队列(Deque)\u0026ndash;限定插入和删除操作在表的两端进行的线性表 列表(List)\u0026ndash;  栈 进行操作的一端为栈顶，另一端为栈底\n栈的特点：后进先出LIFO\n栈通过python的实现可以借助list的数据类型\n栈的应用 括号匹配\u0026ndash;基本思路 \n括号匹配与之前图灵机的模型有些相似；\n 括号匹配可以用用于爬虫HTML数据的爬取；另外该方法也可通过正则表达式实现。  十进制与二进制的转换 十进制转换二进制是余数的连续求取，并将求得的余数倒过来书写。通过栈后进先出的特性可以实现。\n同时由此可以进行十进制到其他进制的转换。当转换的进制为十一禁进制以上时，可以使用数组来保存其中的字母\ndigits = \u0026#34;0123456789ABC\u0026#34; 表达式转换 根据表达式操作符的的位置分为中缀、前缀和后缀，距离操作数最近的操作符先执行\n  中缀表达式转换为前缀和后缀表达式\n将表达式转换为全括号形式，将内部每个运算符移到对应的左括号或右括号处边可以转换为前缀、后缀表达式\n  中缀转后缀算法\n  从左到右扫描过程中，采用栈来暂存为处理的操作符，当遇到一个新的操作符，就需要跟栈顶的操作符比较下优先级，再行处理。\n算法流程\n 从左到右扫描\n- 当遇到操作数，直接输出至列表末尾\n- 当遇到左括号压入栈顶\n- 当遇到右括号，反复弹出栈顶加入至输出列表末尾，直到碰到左括号\n- 当遇到操作符，与栈顶其他操作符比较。栈顶操作符高于或等于它，则将输出栈顶的操作符直到优先级低于它\n 后缀表达式的求值 后缀表达式的操作符在操作数的后面，因此要暂存操作数,直到碰到操作符才进行运算(从这可以利用栈的特性)\n在实际运算时，先弹出的时右操作数然后才是左操作数，对于‘-’和‘/’要注意两个操作数的位置\n算法流程\n  创建空栈用于暂存操作数\n  从左到右扫面单词列表\n 如果是操作数，压入栈顶 如果是操作符，从栈顶弹出两个操作数，进行计算。（注意操作数的位置）    最后扫描结束后，表达式的值被存在栈顶（如果表达式正确，则栈中仅有最后的结果一个元素）\n  引用  数据结构与算法Python版_中国大学MOOC(慕课)  ","date":"2021-01-04T13:09:11+08:00","permalink":"https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/","title":"算法笔记2"},{"content":"算法分析 算法和算法复杂性 可计算的问题：\n what：分类问题——树状判定分支 why： 证明问题——公式序列解决 how： 或称问题——算法流程解决  欧几里得算法的python实现\ndef alg(a,b): if b==0 : return a print(a) c=a%b alg(b,c) def main(): #a,b为要计算的两个数 a=15 b=9 print(alg(a,b)) main() 计算复杂性研究的是问题的难度，算法实在资源约束的情况下寻找最优方案。\n不可计算问题\n 停机问题 几乎所有无理数都无法通过算法找出任意一位精确数  程序与算法的区别 算法是描述问题解决的分布步骤而程序则是通过某种编程语言实现的算法。\n算法分析主要是从计算机资源消耗的角度来评判和比较算法。评判的两个标准有两种：算法执行时间和空间（内存或存储空间）。\n利用python的time库中 time.time()函数可以计算算法的执行时间。\n time.time() 是计算从1970到现在的时长，并将值返回。\n 对于算法运行时间的检测也收到语言性能、机器的性能的影响。\n大O表示法 一个算法所实施的操作数量或步骤可作为独立于程序/机器的度量指标。\n程序设计语言中除与计算资源无关的定义语句外，主要是三种控制流语句和赋值语句。\n一个赋值语句包含了（表达式）计算和（变量）存储两个基本资源。而控制流语句仅起组织语句的作用，并不涉及处理。\n算法分析的目标是找出问题规模如何影响执行时间\n数量级函数 数量级函数描述了T（n）中随着n增加而增加速度最快的主导部分。称作大O表示法记作O(f(n)),其中f(n)表示T(n)中的主导部分。\n T(n)=5n^2+27n+1005\n当n越来越大起主导作用的是5*n^2,其中系数5对n^2的增长速度无影响。因此可以表示为O(n^2)\n 具体数据也会影响算法运行时间，如排序算法。此时分为最好，最差和平均状况，主要还是通过平均状况分析性能。\n大O表示所有上限中最小的那个上限\n大Ω表示所有下限中最大的那个下限\n如果上下限相同用Θ大表示\n变位词  写一个布尔函数，一两个此作为参数，返回两个词是否为变位词\n  将每一个单词逐个检查  课程给的代码示例：\ndef solu1_example(s1,s2): alist = list(s2) pos1 = 0 stillok = True while pos1 \u0026lt; len(s1) and stillok: #只要字符中有一个没找到就可以通过32行退出 pos2 = 0 found =False while pos2 \u0026lt; len(alist) and not found: if s1[pos2] == alist[pos2]: found = True else: pos2 = pos2 + 1 if found: alist[pos2] = None else: stillok = False pos1 = pos1 + 1 return stillok 如果将自己一个一个对比，要注意同一个字符在字符串中可能会出现很多次。因此，在判断是找到一个相同时必须要设置为none\n数量级的计算 两层循环，外层循环为n次，每次到内层每次循环查找次数为1\u0026ndash;n之间。因此总和为：1/2*(n^2)+1/2*n。所以数量级为O(n^2)\n 排序比较：先将字符串按字母顺序排好，再一一对比  def solu2(s1,s2): alist1 = list(s1) alist2 = list(s2) alist1.sort() #列表排序函数 alist2.sort() pos=0 matches = True while pos \u0026lt; len(s1) and matches: if alist1[pos] == alist2[pos]: pos = pos + 1 else: matches = False return matches 看似很简单仅有一个循环，但在两个数组排序过程消耗的时间不可忽视。时间运算数量级为O(nlog n)\n暴力法 将S1中的字符进行全排列，然后查看S2是否在其中。\n用暴力算法解决时，数量级会以N!的方式增长。\n计数比较 检查26个字母在字符中出现的情况，若两者相同则输出。\nord()函数：返回字符的Unicode编码值\nT(n)=2n + 26;\n因此数量级为O(n);相比之下，该项算法性能较优，然而该算法需要的内存空间较大。\ndef solu4(s1,s2): c1 = [0] * 26 c2 = [0] * 26 for i in range(len(s1)): pos = ord(s1[i]) - ord(\u0026#39;a\u0026#39;) #返回一个字符的uincode编码 c1[pos] = c1[pos] + 1 for i in range(len(s2)): pos = ord(s2[i]) - ord(\u0026#39;a\u0026#39;) c2[pos] = c2[pos] + 1 j = 0 stillok = True while j \u0026lt; 26 and stillok: if c1[j] == c2[j]: j = j + 1 else: stillok = False return stillok Python数据类型的性能 list和dict 按索引取值和赋值：由于列表的随机访问特性，均为O(1)\n列表添加append()和_add_()\u0026quot;+\u0026quot;\n list.append(v)\u0026ndash;O(1),lst= lst+ [v] 实行时间为O(n+k),k为所加列表长度  pop的复杂度 从尾部移除数组的元素是复杂度为O(1),移除数组中某一元素为O(N)；原因是移除中间元素需要将这个元素后面的元素前移。这是为了保证按索引取值和赋值速度的妥协。\n在列表中in操作复杂度为O(N),字典中为O(1)。\n引用  数据结构与算法Python版_中国大学MOOC(慕课)  ","date":"2021-01-04T13:09:08+08:00","permalink":"https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01/","title":"算法笔记1"},{"content":"抽象数据类型（ADT） 是对数据进行处理的一种逻辑描述，并不设计如何实现这些处理。\n递归 编写递归代码要注意的三点：\n  递归总有一个最简单的情况\u0026mdash;方法的第一条语句总是包含 return 的条件语句。 递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。 递归调用的父问题和尝试解决的子问题之间不应该有交集。   ","date":"2021-01-04T13:09:05+08:00","permalink":"https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00/","title":"算法笔记0"},{"content":"王小波的书读起来都不是那么的晦涩难懂，但读着读着却好像抓住了一些隐晦的道理，这些看似简单但有耐人寻味。\n这本书越是读到后面越是感觉的一丝丝凄凉。红拂，卫公，王二放荡不羁，心中有着一个诗意的世界。都以为自己可以挣脱一切束缚，却不知早已掉进更大的陷阱中去。卫公和红拂跳出了洛阳城，却又困在长安城中再也无法离开。而和人糟心的是，这是卫公亲手打造的长安城。书中说，这就好比把自己当成猪一样，自己还给自己造了围栏。\n这不禁让我想起:曾经，我天真地以为进入初中，高中，大学，社会就会过得更自由，可以做自己想做的事。但到最后连能体面地活下去都是奢望了。不曾想自己早已变成了那万众韭菜中的一抹绿。 于是，我才明白。人生就像俄罗斯套娃一样，而我一直是在最里面那层。随着你不断的长大，你回发现那束缚一层一层，无穷无尽。即使你能够傲视群雄，仍不能放浪形骸。\n这个世界许多时候真的太糟糕了，甚至各种匪夷所思的事情在各地轮番上演，比任何小说都魔幻。书中的话”一个人只拥有此生此世是不够的，他还应该拥有诗意的世界。”对我来说更像是一种安慰，在世界上唯一能让自己无拘无束的，还是心中的那个世界啊。\n","date":"2021-01-04T13:01:27+08:00","permalink":"https://abananajuice.github.io/p/%E7%BA%A2%E6%8B%82%E5%A4%9C%E5%A5%94/","title":"《红拂夜奔》"},{"content":"清晨，街道;\n单车，外套。\n家中的黑猫，\n不辞而别。\n我拼命的寻找，\n却仿佛从未出现。\n ","date":"2021-01-04T12:56:41+08:00","permalink":"https://abananajuice.github.io/p/%E9%9B%BE/","title":"雾"},{"content":"yolov3学习笔记 基本概念 下采样即图像缩小；将x*x个像素点取均值换算为一个。\n上采样即图像放大，利用插值算法。\nground truth即监督学习中数据标注的正确的范围。也就是标准答案的意思。\nIOU预测的范围（bounding box）与ground truth的交集/两者并集\nbounding box(bbox) 在目标检测中不仅要知道目标的类别还要知道它的位置。在木变检测中常用边界框来描述目标位置。\nanchor box目标检测算法通常会在输入图像中采样大量的区域，然后判断这些区域中是否包含我们感兴趣的目标，并调整区域边缘从而更准确地预测目标的真实边界框（ground-truth bounding box）。不同的模型使用的区域采样方法可能不同。这里我们介绍其中的一种方法：它以每个像素为中心生成多个大小和宽高比（aspect ratio）不同的边界框。这些边界框被称为锚框（anchor box）。(——动手做深度学习)\n精确率与召回率实际上非常简单，精确率是针对我们预测结果而言的，它表示的是预测为正的样本中有多少是真正的正样本。那么预测为正就有两种可能了，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)，也就是\nP=TP/(TP+FP)\n而召回率是针对我们原来的样本而言的，它表示的是样本中的正例有多少被预测正确了。那也有两种可能，一种是把原来的正类预测成正类(TP)，另一种就是把原来的正类预测为负类(FN)。\nR=TP/TP+FN\n非极大值抑制简称为NMS算法，思想是搜索局部最大值，抑制极大值。\n流程如下：\n 根据置信度得分进行排序\n选择置信度最高的比边界框添加到最终输出列表中，将其从边界框列表中删除\n计算所有边界框的面积\n计算置信度最高的边界框与其它候选框的IoU。\n删除IoU大于阈值的边界框\n重复上述过程，直至边界框列表为空。\n **批标准化(batch normalization)**将分散的数据统一的做法，便与神经网络的学习和优化。normalization 预处理, 使得输入的 x 变化范围不会太大, 让输入值经过激励函数的敏感部分。BN实在每个全连接层之间都进行批数据标准化。(作者： 聚类算法 聚类算法是根据样本之间的距离来将他们归为一类的，这个距离不是普通的距离，理论上叫做欧氏距离。\n一般面向大量的，同时维度在2个或两个以上的样本群。\n 1、在样本中随机选择K个点，作为每个类别的初始中心点，这K是自己定的，假如你想将样本分成3个类K就等于3,4个类K就等于4；\n2、计算所有样本离这K个初始中心点的距离并分别进行比较，选出其中最近的距离并把这个样本归到这个初始中心点的类别里，即总共划分成K个类别；\n3、舍弃原来的初始中心点，在划分好的K个类别里分别计算出新的中心点，使得这些中心点距离他类别里的所有样本的距离之和最小；\n4、判断新获得的中心点是否与旧中心点一样，如不一样则回到第2步，重新计算所有样本离这K个新的中心点的距离并进行比较，选出其中最近的距离并归到这个新的中心点的类别里，继续下面的步奏；如一样则完成，即收敛。\n 残差网络 残差 残差：实际观测值与估计值（拟合值）之间的差。如果回归模型正确则残差可以看做误差的观测值。\n理论上，可以训练一个 shallower 网络，然后在这个训练好的 shallower 网络上堆几层 identity mapping（恒等映射） 的层，即输出等于输入的层，构建出一个 deeper 网络。这两个网络（shallower 和 deeper）得到的结果应该是一模一样的.\n退化问题 为什么属于随着层数的增多训练集上的效果变差？\n原因是随着网络越来越深，训练变得原来越难，网络的优化变得越来越难。理论上，越深的网络，效果应该更好；但实际上，由于训练难度，过深的网络会产生退化问题，效果反而不如相对较浅的网络。而残差网络就可以解决这个问题的，残差网络越深，训练集上的效果会越好。（测试集上的效果可能涉及过拟合问题。过拟合问题指的是测试集上的效果和训练集上的效果之间有差距。）这里要注意到过拟合与退化问题之间的区别\n残差块 残差网络是通过加入shortcut connections,变得更容易被优化。包含一个shortcut connection的几层网络被称为一个残差块。shortcut即图中x到 ⨁的箭头。\n残差块（residual block） 𝑥 表示输入，𝐹(𝑥) 表示残差块在第二层激活函数之前的输出，即 𝐹(𝑥)=𝑊2𝜎(𝑊1𝑥)，其中 𝑊1 和 𝑊2 表示第一层和第二层的权重，𝜎 表示 ReLU 激活函数。（这里省略了 bias。）最后残差块的输出是 𝜎(𝐹(𝑥)+𝑥)。\n激活函数：上层节点的输出与下层节点的输入之间的函数关系。\n常用的激活函数有：sigmoid函数，tanh函数，relu函数（这个比较常用）\u0026hellip; \u0026hellip;\n残差块中的网络可以使全连接层也可以是卷积层。\n 设第二层网络在激活函数之前的输出为 𝐻(𝑥)。如果在该 2 层网络中，最优的输出就是输入 𝑥，那么对于没有 shortcut connection 的网络，就需要将其优化成 𝐻(𝑥)=𝑥；对于有 shortcut connection 的网络，即残差块，最优输出是 𝑥，则只需要将 𝐹(𝑥)=𝐻(𝑥)−𝑥 优化为 0 即可。后者的优化会比前者简单。这也是残差这一叫法的由来。\n 上面相当于优化了恒等映射。残差网络可以不是神经网络，用全连接层也可以。\n为什么残差网络会work 我们给一个网络不论在中间还是末尾加上一个残差块，并给残差块中的 weights 加上 L2 regularization（weight decay），这样图 1 中 𝐹(𝑥)=0 是很容易的。这种情况下加上一个残差块和不加之前的效果会是一样，所以加上残差块不会使得效果变得差。如果残差块中的隐藏单元学到了一些有用信息，那么它可能比 identity mapping（即 𝐹(𝑥)=0）表现的更好。\n边界框回归 对于窗口一般使用四维向量(x,y,w,h) 来表示， 分别表示窗口的中心点坐标和宽高。 对于图 2, 红色的框 P 代表原始的Proposal, 绿色的框 G 代表目标的 Ground Truth， 我们的目标是寻找一种关系使得输入原始的窗口 P 经过映射得到一个跟真实窗口 G 更接近的回归窗口Ĝ。\n边框回归的目的既是：给定(Px,Py,Pw,Ph)(Px,Py,Pw,Ph)寻找一种映射ff， 使得f(Px,Py,Pw,Ph)=(Gx^,Gy^,Gw^,Gh^)f(Px,Py,Pw,Ph)=(Gx^,Gy^,Gw^,Gh^) 并且(Gx^,Gy^,Gw^,Gh^)≈(Gx,Gy,Gw,Gh)\n边框回归的方法：平移+尺度缩放\nyolov1-yolov3 yolov1 检测处理理想 将输入图片划分为S * S的格子（逻辑区域），如果物体的中心坐标落在某个格子中，那么这个格子就负责检测这个物体（包括bounding box的坐标和类别概率）。每个格子预测B个bounding boxes和B个置信度，这个置信度表示这个格子预测的bounding boxes包含物体的可信程度，论文作者将置信度定义为 Pr(Object)* IOU。Pr(Object)的值为0或者1，表示存不存在目标物体。\n每一个bounding box包括五个元素，x，y，w，h，confidence。坐标(x，y)表示的是box的中心坐标，并且是相对于格子的边界而言，w和h也是相对于整张图片的宽度和高度而言。置信度预测的值表示预测框和真实框的IOU值。虽然每个格子预测B个bounding box，但是每个格子只预测一组类条件概率，注意这里不是anchor，因为多个bounding box共用了一组class probability(表示的是先验概率)。所以网络架构的最后一层实际预测了B个bouding box和一组类别概率，注意这只是针对于一个格子，所以在不考虑batch size的情况下，实际预测输出长度为S* S*（B*5+C)\n训练过程 对于前面所说bounding box，作者也做了一些处理，将bounding box的w,h除以训练图像的宽度和高度（448*448），使其值在0-1之间。至于bouding box的x,y的实际值意义，作者认为不是相对于整张图片的中心坐标值，而是相对于的对应格子坐标左上边界偏移值，所以x,y的值也在0-1之间，这个地方有些难以理解。\n通过置信度为每一个各自从B个bounding box中筛选一个最终的bounding box。于是每个各自的坐标为（0+x，0+y），（0+x, 1+y）\u0026hellip;\u0026hellip;.\n通过我们设定的置信度阈值使用非极大值抑制方法从这49个bounding box中筛选；还有一种做法就是直接从98个bounding boxes使用非极大值抑制方法筛选。从图片的全局性来考虑，第一种方法更能体现图片的整体性。确定完bounding boxes后，用bounding box坐标值乘以与原图的比例值就可以在原图中框出相应的物体。\nyolov2 1.对数据进行批标准化处理。\n2.High Resolution Classifier:低分辨率训练分类网络，高分辨率训练检测网络，在两个过程见了一个适应性微调。\n3.Convolutional With Anchor Boxes（锚框卷积）：作者去掉了YOLOv1的全连接层，使用anchor boxes来预测bounding boxes，同时也去掉了最后池化层使得最后feature maps的分辨率大一些。与YOLOv1不同的是，YOLOv2为每一个bounding box预测一个类条件概率【YOLOv1中B个bounding box共用一个类条件概率】。在YOLOv1中bounding boxes数目为：S* S*(5* B+C)，而在YOLOv2中bounding box数目为S * S*B（5+C）。使用anchor box没有使精度提升，提高了召回率。\n4.作者采用维度聚类的方法对数据集的真实标签的bounding box进行聚类分析从而确定B的取值。如果用欧式距离来衡量K-means的距离，会使得大的bounding box比小的bounding box产生更大的误差，于是作者调整距离计算公式为： 5.13* 13的feature map可以提供足够信息预测较大的物体，但是对于小物体而言提供的信息仍然不够，所以作者提供了一个passthrough层，利用26*26的feature map来预测小物体（可能是受SSD的启发，不同大小的特征图检测不同大小的物体）。\n6.YOLOv2的网络只有卷积层和池化层，所以就可以在训练进行的过程改变feature maps的shape。 为了使得YOLOv2更具鲁棒性，我们让模型能够对不同大小的图片进行训练。在训练过程中，每10个batch就换一组新尺度的图片（这里的新图片指大小不同，图片的其他属性是一样的）。\n 作者提出了一种将分类数据集和检测数据集联合训练的方法，在训练的过程，我们将这两类数据集混合，当输入的检测数据集时，反向传播全部的误差损失（YOLOv2的loss），当遇到分类数据集时，只反向传播分类误差损失。\n yolov3 ###　1.边界框预测\n YOLOv3中引入一个Objectness score概念，使用logistic regression为每一个bounding box预测一个Objectness score。将预测的bounding boxes中与真实bounding box重叠最大的bounding box的Objectness score赋值为1，如果这个bounding box与真实bounding box重叠值达到设定的阈值0.5，这个bounding box的损失为0，其同一格子里面的其他bounding box只计算置信度损失，忽略坐标损失和类别损失。(可以认为0.5表示预测的边界框已经能很好地标记框出物体，所以不用计算它的损失。每一个格子中的object由一个预测的bounding box预测。既然已经找到了较好地bounding box，所以同一个格子里面的其他bounding box没有必要计算坐标误差和分类误差，只需要计算置信度误差，用来调整置信度，最理想的效果是这些bounding box的置信度值更新为0）。\n这里bounding box是指网络模型预测的confidence，bx，by，bw，bh，计算置信度误差时，用真实标签坐标和预测坐标（bx，by，bw，bh）计算IOU，Objectness score相当于Pr(Object)，所以最终的置信度计算为IOU*Pr（Object）\n 2.类别预测 类别预测使用了多标签分类（多分类），没有使用softmax，而是对每一个类各自对立地使用了logistic分类器，用binary cross-entroy loss替代softmax loss，这样能较好地处理标签重叠（包含）关系（例如：女人和人）。\n3.交叉尺度(多尺度)预测 YOLOv3预测三种不同尺度的box，每一种尺度预测三个anchor boxes，即NN(3*(4+1+80))，所以最终的输出是3*【N*N*(3*(4+1+80))】，最前面的3表示三种尺度。3种尺度，3个anchor box，是由聚类数为9决定的，按照一定的顺序（面积从小到大）将这个聚蔟box分配给不同尺度。在YOLOv2中，为了加强对小物体的检测，引入了passthrough层，假设最后提取的feature map的size是13*13，passthrough层的作用是将上层26*26的feature map和最后层13*13的feature map连接，作为网络最后的输出。\nYOLOv3是采用了低分辨率feature map上采用和高分辨率feature map做融合，形成新的feature map层，对新的feature map层单独做预测。这样就是多尺度预测。如果YOLOv3最后一层也是1313的话，那么三个尺度的大小为（1313，2626，5252），第三个尺度只用第二个尺度上采样并做融合。值得说明的是：YOLOv2中的多尺度指输入图像的大小不同，YOLOv3的多尺度是指用不同的分辨率的feature map做预测。\n ##　参考文献：\n什么是批标准化　作者：莫烦\n聚类算法　作者：挖数\n残差网络　作者：wuliytTaotao\n边框回归(Bounding Box Regression)详解　作者：南有乔木NTU\n目标检测之YOLO系列-V1至V3改进详解　作者：xd1723138323\n","date":"2019-08-17T17:20:47+08:00","permalink":"https://abananajuice.github.io/p/yolo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%91/","title":"Yolo学习笔记＿１"},{"content":" 这篇笔记会根据情况隔段时间更新一次\n 终端操作  cd+文件夹名 进入文件夹 可以使用TAB键进行自动补全或选择 cd ..( 退出几层就加几个..) 退出到上n层路径\nls 显示文件夹中的目录\npwd 显示当前路径\ngedit 使用文本编辑器编辑文件\ncat 在终端中查看文件（多用做文本文件）\nsudo 进入管理员模式（超级用户)\nsudo su 进入根用户\nnvidia-smi 查看显卡运行状态（A卡没有试过）\n 在ubuntu中一些文件被写保护，需要更高级权限才能修改，可以在命令前加sudo\n复制一个文件到指定目录  (1) 在桌面上打开终端，输入sudo su\n(2) 输入密码，就切换到root用户下\n(3) 切换到桌面 命令输入为 cd 桌面\n(4) 然后输入复制命令行 cp -r studio.zip /home/androidstudio\n(5) 回车 大功告成 可以看看/home/androidstudio目录下是否有studio.zip\n 作者：飞奔的小付\n来源：CSDN\n原文\n移动文件（假设现在在该文件的目录下）\n sudo mv xxx.xx 新的位置的路径\n 解压文件\n sudo unzip opencv-3.3.0.zip\n 重命名文件\n sudo cp 原文件名 新文件名\n 软件安装 软件安装前一般要先更新软件目录\n sudo apt-get update\n 升级已有软件\n sudo apt-get upgrade 常用软件安装 https://www.jianshu.com/p/f44e1ae080a5\n 下载好网易云音乐安装完成后可能会遇到问题打不开。可以在终端中使用\n sudo netease TAb(自动补全)\n 当下在好软件安装包后，也可以在本地安装\n sudo sh xxx.sh\ndpkg -i xxx.deb\n google浏览器安装\n踩过的坑 没有声音解决办法\n具体情况是：可以调节音量，但却没有声音 这个问题到现在，我仍旧是每次开机仍要打开文章中所说的软件修改一次 ubuntu和win双系统中无法访问win中的磁盘分区\n sudo ntfsfix /dev/磁盘号\n如sudo ntfsfix /dev/sda6\n ubuntu中python2和3共存\n source activate [要激活的环境名称]\nsource deactivate\n 如何修复 apt-get update 无法添加新的 CD-ROM 的错误\n侵权即删\n","date":"2019-06-30T11:00:55+08:00","permalink":"https://abananajuice.github.io/p/ubuntu%E7%AC%94%E8%AE%B0/","title":"Ubuntu笔记"}]