<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Mark</title>
        <link>https://https://abananajuice.github.io/</link>
        <description>Recent content on Mark</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 19 Feb 2021 11:36:19 +0800</lastBuildDate><atom:link href="https://https://abananajuice.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《苏菲的世界》摘抄-3</title>
        <link>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-3/</link>
        <pubDate>Fri, 19 Feb 2021 11:36:19 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-3/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/GnahtO&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s1.ax1x.com/2020/03/30/GnahtO.jpg&#34; alt=&#34;GnahtO.jpg&#34;  /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;启蒙&#34;&gt;启蒙&lt;/h2&gt;
&lt;p&gt;1．反抗权威 2．理性主义 3．启蒙运动 4．文化上的乐观态度 5．回归自然 6．自然宗教 7．人权&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十八世纪前半，欧洲的哲学中心是在英国，十八世纪中期，是在法国，十八世纪末，则是在德国。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整个西方哲学，发源于希腊然后被罗马帝国传到整个欧洲。之后由西向东，英国，法国，德国。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;康德&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;康德的概念是：时间与空间属于人类的条件。时、空乃是人类感知的方式，并非物质世界的属性。”我们所见到的事物首先会被看成是时间与空间里的一个现象。康德将‘时间’与‘空间’称为我们的两种‘直观形式’（formofintuition）。他强调我们心灵中的这两种‘形式’先于一切经验。换句话说，我们在还没有经验事物之前，就可以知道我们感知到的将是一个发生在时间与空间里的现象。因为我们无法脱掉理性这副‘眼镜’。康德认为‘事物本身’和‘我眼中的事物’是不一样的。这点很重要。我们永远无法确知事物‘本来’的面貌。我们所知道的只是我们眼中‘看到’的事物。从另外一个角度来看，我们在每一次经验之前都可以预知我们的心灵将如何认知事物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;因果律&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;休姆认为我们无法证明因果律，康德则认为因果律的存在正是人类理性的特色。正因为人类的理性可以感知事物的因果，因此因果律是绝对的，而且永恒不变的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;据康德的说法，人类对于世界的观念受到两种因素左右。一个是我们必须透过感官才能知道的外在情况，我们可以称之为知识的原料。另外一个因素就是人类内在的情况，例如我们所感知的事物都是发生在时、空之中，而且符合不变的因果律等。我们可以称之为知识的形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;康德认为在这些大问题上，理性所能够运作的范围超过了我们人类所能理解的程度。可是在这同时，我们的本性中有一种基本的欲望要提出这些问题。可是，举个例子，当我们问‘宇宙是有限还是无限？’时，我们的问题关系到的是一个我们本身在其中占一小部分的事物。因此我们永远无法完全了解这个事物。当我们想知道世界从何而来，并且讨论可能的答案时，我们的理性可以说‘暂时停止作用’。因为它没有感官的材料可能加以处理，也没有任何相关的经验可资利用，因为我们从未经验过我们渺小的人类所隶属的这个大宇宙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可见哲学与科学的发展结合得是如此的紧密，或者说哲学是科学的先导。我们无法解释这些大问题，如同薛定谔的猫一样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于理性而言，上帝存不存在都有可能。他开创了一个宗教的空间。在这个空间中，理性和经验都派不上用场，因此形成了一种真空的状况。这种真空只能用信仰来填补。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;伦理道德&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你选择不要对别人不好时——即使这样会违反你自己的利益——你就是在从事自由的行为。而如果你只是做自己想做的事，你就不算自由或独立。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;道德规则是有自己内心的理性所决定的，规则由自己来定。但做自己想做的的事，看似自由但只是遵循自己的物质欲望，个人的意志仍旧被限制着。至人无己，神人无功，圣人无名。这才是道德的最高境界。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为一个由物质形成的存在者，我们完全属于自然界，因此受到因果律的支配。在这种情况下我们没有自由意志可言。可是作为一个有理性的存在者，我们在康德所谓的‘物自身’（与我们的感官印象没有关系的世界本身）中占有一席之地。只有在我们追随我们的‘实践理性’，并因此得以做道德上的抉择时，我们才有自由意志可言。因为当我们遵守道德法则时，我们也正是制定这项法则的人。” “是的，从某个角度来说，这是对的。因为是我自己（或我内心的某种东西）决定不要对别人不好的。” “所以当你选择不要对别人不好时——即使这样会违反你自己的利益——你就是在从事自由的行为。” “而如果你只是做自己想做的事，你就不算自由或独立。” “我们可能会成为各种事物的奴隶，我们甚至可能成为我们的自我中心思想的奴隶。独立与自由正是我们超脱自我的欲望与恶念的方法。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;有两件事物我愈是思考愈觉神奇，心中也愈充满敬畏，那就是我头顶上的星空与我内心的道德准则。它们向我印证：上帝在我头顶，亦在我心中。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;浪漫主义&#34;&gt;浪漫主义&lt;/h2&gt;
&lt;p&gt;时间：&lt;strong&gt;十八世纪到十九世纪中叶&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特征：向往大自然和大自然的神秘&lt;/p&gt;
&lt;h3 id=&#34;弗里德里希谢林&#34;&gt;弗里德里希·谢林&lt;/h3&gt;
&lt;p&gt;时间：1775-1845&lt;/p&gt;
&lt;p&gt;主张：心灵与物质合而为一。大自然的全部——包括人的灵魂与物质世界——都是一个‘绝对存在’（Abso1ute）（或世界精神）的表现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两种浪漫主义：一种是我们所称的‘普世性的浪漫主义’，就是指那些满脑子自然、世界灵魂与艺术天才的浪漫主义者。这种浪漫主义最先兴起。另外一种被称为‘民族浪漫主义’，不久就日益风行，尤其是在海德堡。民族浪漫主义关切的重点是‘民族’的历史、‘民族’的语言和‘民族’的文化。他们将发展视为一个不断开展它的内在潜能的有机体，就像自然与历史一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;黑格尔&#34;&gt;黑格尔&lt;/h3&gt;
&lt;p&gt;真理是主观的，所有的知识都是人类的知识。&lt;/p&gt;
&lt;p&gt;黑格尔相信人类认知的基础代代不同，因此世间并没有‘永恒的真理’，没有‘永久的理性’。哲学唯一可以确切掌握的一个定点就是历史。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;黑格尔所指的‘世界精神’或‘世界理性’乃是人类理念的总和，因为唯独人类有‘精神’可言。只有从这个角度，他才可以谈世界精神在历史上的进展。但我们不可以忘记：这里他所说的世界精神是指人类的生命、思想与文化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对黑格尔来说，历史就像一条流动的河。河里任何一处河水的流动都受到上游河水的涨落与漩涡的影响。但上游河水的涨落与漩涡又受到你观察之处的岩石与河湾的影响。思想（或理性）的历史就像这条河流。你的思考方式乃是受到宛如河水般向前推进的传统思潮与当时的物质条件的影响。因此你永远无法宣称任何一种思想永远是对的。只不过就你所置身之处而言，这种思想可能是正确的。哲学思维也是如此，我们的理性事实上是动态的，是一种过程。而‘真理’就是这个过程，因为在这个历史的过程之外，没有外在的标准可以判定什么是最真、最合理的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;辩证法&#34;&gt;辩证法&lt;/h3&gt;
&lt;p&gt;历史是一长串的思维。新思想的产生是以旧思想为基础的，新思想产生后马上便会产生与它相抵触的思想。这种对立状态又会随着时间而消融。黑格尔把这个现象称为一种辩证过程。&lt;/p&gt;
&lt;p&gt;除了语言之外，我们会有哪一种历史背景也是一生下来就注定了。没有人和这类背景之间能有一种‘自由’的关系。没有人民，固然就没有国家，但如果没有国家，也就没有人民。根据黑格尔的说法，个人不能发现自我，只有世界精神能够发现自我。&lt;/p&gt;
&lt;p&gt;首先，世界精神意识到自我在个人中的存在。黑格尔称此为主观精神。然后它在家庭、社会与国家之中达到更高的意识。黑格尔称此为客观精神，因为它在人与人之间的互动显现。可是还有第三个阶段。：世界精神在‘绝对的精神’中达到最高形式的自我实现。这个‘绝对的精神’就是艺术、宗教和哲学。其中又以哲学为最高形式的知识，因为，在哲学中，世界精神思考它对历史的冲击，因此世界精神是最先在哲学中发现了它的自我。你不妨说哲学是世界精神的镜子。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>《苏菲的世界》摘抄-2</title>
        <link>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-2/</link>
        <pubDate>Fri, 19 Feb 2021 11:31:28 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-2/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/yfrFdU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s3.ax1x.com/2021/02/19/yfrFdU.jpg&#34; alt=&#34;yfrFdU.jpg&#34;  /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;中世纪&#34;&gt;中世纪&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;中世纪（ Middle Ages）（约公元476年~公元1453年），是欧洲历史上的一个时代（主要是西欧），自西罗马帝国灭亡（公元476年）到文艺复兴和大航海时代（15世纪末到17世纪）的这段时期。另有说法认为中世纪结束于文艺复兴和大航海时代。“中世纪”一词是15世纪后期的意大利人文主义者比昂多开始使用的。这个时期的欧洲没有一个强有力的政权来统治。封建割据带来频繁的战争，基督教对人民思想的禁锢，造成科技和生产力发展停滞，人民生活在毫无希望的痛苦中，所以中世纪或者中世纪早期在欧美普遍被称作“黑暗时代”，传统上认为这是欧洲文明史上发展比较缓慢的时期。（关于其名称，也叫做“ Medieval Ages&amp;quot;或&amp;quot; Middle Times&amp;quot;，也称之为” Dark Ages&amp;quot;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公元五二九年，也就是教会关闭雅典的柏拉图学园那一年。同年，圣本笃修会成立，成为历史上第一个大修会。这一年因此成为基督教会钳制希腊哲学的一个象征。从此以后，修道院垄断了所有的教育与思想。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;腊罗马文化分裂成三种文化，并分别在其中存活。这三种文化分别是：西边的罗马天主教文化、东边的东罗马帝国文化与南边的阿拉伯文化。大致上，我们可以说新柏拉图派哲学在西边承传了下来。柏拉图与亚里士多德的哲学则分别在东边与南边承传了下来。不过，我们可以说，在这三种文化中，每种成分都各有一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;中世纪哲学家所探讨的问题：&lt;br&gt;
“中世纪的哲学家几乎认定基督教义就是真理。他们的问题在于：我们是否一定要相信基督教的启示？还是我们可以借助理性来探索基督教的真理？希腊哲学家与圣经的记载有何关系？圣经与理性之间有抵触吗？还是信仰与知识是可以相容的？几乎所有的中世纪哲学都围绕在这些问题上打转。“&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;文艺复兴&#34;&gt;文艺复兴&lt;/h2&gt;
&lt;p&gt;时间：&lt;strong&gt;14-16世纪&lt;/strong&gt;
核心：人文主义精神&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;哲学与科学逐渐脱离教会的神学，使得宗教生活与理性思考之间的关系比较自由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想这也造成了人们思想的解放，产生了文艺复兴。&lt;/p&gt;
&lt;p&gt;泛神论：如果神真的是无穷和无限的，他就会存在与万事万物中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文艺复兴运动造成了新的宗教情感（狂热）。随着哲学与科学逐渐脱离神学的范畴，基督徒变得更加虔诚。到了文艺复兴时期，由于人类对自己有了新的看法，使得宗教生活也受到了影响。个人与上帝之间的关系变得比个人与教会组织之间的关系更加重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;巴洛克时期&#34;&gt;巴洛克时期&lt;/h2&gt;
&lt;p&gt;时间：&lt;strong&gt;17世纪&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理想主义与唯物主义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有许多人认为生命基本上具有一种崇高的特质。我们称之为‘理想主义’。另一种迥然相异的看法则被称为‘唯物主义’，就是指一种相信生命中所有的自然现象都是从肉体感官而来的哲学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;灵魂与肉体的关系&#34;&gt;灵魂与肉体的关系&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;笛卡尔：我思故我在&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笛卡尔认为在构建自己的哲学体系之前，必须先挣脱前人理论的影响。他希望用数学的方法来进行哲学性的思考，用理性来解决哲学问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他怀疑每一件事，而这正是他唯一能够确定的事情。此时他悟出一个道理：有一件事情必定是真实的，那就是他怀疑。当他怀疑时，他必然是在思考，而由于他在思考，那么他必定是个会思考的存在者。用他自己的话来说，就是：Cogito，ergosum。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.人是会思考的生物。（我思故我在，理性不感官更真实）
2.上帝是存在的。（人对于完美实体概念证明了上帝存在）
3.宇宙有一个外在的真实世界。（能被度量的存在）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;笛卡尔宣称宇宙间共有两种不同形式的真实世界（或称‘实体’）。一种实体称为思想或‘灵魂’，另一种则称为‘扩延’（Extension），或称物质。灵魂纯粹是属于意识的，不占空间，因此也不能再分解为更小的单位；而物质则纯粹是扩延，会占空间，因此可以一再被分解为更小的单位，但却没有意识。笛卡尔认为这两种本体都来自上帝，因为唯有上帝本身是独立存在的，不隶属任何事物。不过，‘思想’与‘扩延’虽然都来自上帝，但彼此却没有任何接触。思想不受物质的影响，反之，物质的变化也不受思想的影响。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笛卡尔将思想世界与真实世界一分为二，因此是一个二元论者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;斯宾诺莎：大自然就是上帝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一元论者：他认为宇宙间只有一种实体。既存的每样事物都可以被分解、简化成一个他称为‘实体’的真实事物。他有时称之为‘上帝’或‘大自然’。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上帝并不是一个傀儡戏师傅，拉动所有的绳子，操纵一切的事情。一个真正的傀儡戏师傅是从外面来操纵他的木偶，因此他是这些木偶做出各种动作的‘外在因’。但上帝并非以这种方式来主宰世界。上帝是透过自然法则来主宰世界。因此上帝（或自然）是每一件事情的‘内在原因’。这表示物质世界中发生的每一件事情都有其必要性。对于物质（或自然）世界，斯宾诺莎所采取的是决定论者的观点。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;斯宾诺莎指出，使我们无法获得真正的幸福与和谐的是我们内心的各种冲动。例如我们的野心和欲望。但如果我们体认到每一件事的发生都有其必然性，我们就可以凭直觉理解整个大自然。我们会很清楚地领悟到每一件事都有关联，每一件事情都是一体的。最后的目标是以一种全然接纳的观点来理解世间的事物。只有这样，我们才能获得真正的幸福与满足。这是斯宾诺莎所说的SubSpecieaeternitatis。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;欧洲理性主义：笛卡尔，斯宾诺莎，莱布尼茨
英国经验主义：洛克，柏克莱，休姆。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;经验主义&lt;/strong&gt;：从感官的经验获取一切世界知识的人。（与笛卡尔的思想相反）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;洛克&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主题：我们的概念从何而来？我们是否可以信赖感官的经验？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的心灵除了被动地接收外界的印象之外，同时也积极地进行某种活动。它以思考、推理、相信、怀疑等方式来处理它所得到的各种单一感官概念，因此产生了洛克所谓的‘思维’（reflection）。所以说，他认为感觉（sensation）与思维是不同的，我们的心灵并不只是一具被动的接收器，它也会将所有不断传进来的感觉加以分类、处理。而这些是我们需要当心的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的概念来自于感官。一些先入为主的印象，就是对所有外界的信息一味地不加思索地接收，有的时候甚至是无意识的。我们所接触到的文字，视频等信息都会潜移默化地对我们产生影响。因此，输入很重要。这个方面看，洛克的思想对现代人很具有价值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那些无法回溯到一种单一感觉的知识便是虚假的知识，我们不应该接受。克将感官的性质分为‘主要’与‘次要’两种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;休姆：将他付之一炬&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们也必须以这种方式厘清自身所有的思想观念和整理自己的藏书。他说，如果我们手里有一本书……我们应该问：‘书里是否包含任何与数量和数目有关的抽象思考？’如果答案是‘没有’，那么我们应该再问：‘书里是否包含任何与事实和存在有关的经验性思考？’如果答案还是‘没有’，那么我们还是将它付之一炬吧，因为这样的书内容纯粹是诡辩和幻象。”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可知论者：指一个怀疑上帝是否存在的人。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;休姆并不否认世间有不变的‘自然法则’。但他认为，由于我们无法体验自然法则本身，因此很容易作出错误的结论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一件事情跟着另外一件事情发生，并不一定表示两者之间必有关联。哲学的目的之一就是教人们不要妄下定论。因为，妄下定论可能会导致许多迷信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;柏克莱&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;唯心主义，对客观世界根本否定&lt;/p&gt;
</description>
        </item>
        <item>
        <title>《苏菲的世界》摘抄-1</title>
        <link>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-1/</link>
        <pubDate>Fri, 19 Feb 2021 11:24:25 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E8%8B%8F%E8%8F%B2%E7%9A%84%E4%B8%96%E7%95%8C%E6%91%98%E6%8A%84-1/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/yfDtbT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s3.ax1x.com/2021/02/19/yfDtbT.md.jpg&#34; alt=&#34;yfDtbT.md.jpg&#34;  /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个人都需要食物，每一个人都需要爱与关怀。不过除了这些以外，还有一些东西是人人需要的，那就是：明白我们是谁、为何在这里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望我们都不会成为一个把这个世界视为理所当然的人。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;神话&#34;&gt;神话&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;善与恶之间的脆弱平衡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有人曾说过：科学的尽头是哲学，哲学的尽头是神学。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哲学诞生于公元前600年的希腊&lt;/strong&gt;，在那之前人们通过宗教来解答心中的哲学问题。当时希腊所形成的城邦推动了哲学的诞生。
希腊城市中大多的劳力都由奴隶承担，因此市民有更多的时间参与到政治和文化之中。人们的思考方式也发生了变化。&lt;br&gt;
任何人都可以质疑社会的组成方式，也可无须借助古代神话来提出哲学问题。&lt;br&gt;
书中称这样现象为“从神话的思考模式发展到以经验与理性为基础的思考模式”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;早期希腊哲学家的目标乃是为大自然的变化寻找自然的——而非超自然的解释。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;自然派哲学家&#34;&gt;自然派哲学家&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;没有一件事物可以来自虚无&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;自然派哲学家关注的是大自然与它的自然循环与变化。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们最感兴趣的并不是这些早期的哲学家找出了那些答案，而是他们的问了什么问题、寻求何种答案等等。我们对他们的思考方式较感兴趣，而不是他们的思考内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三位梅雷斯特的哲学家：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;泰利斯：水是万物之源&lt;/li&gt;
&lt;li&gt;安纳克西曼德：我们的世界是“无限定者”中无数生生灭灭中的一个&lt;/li&gt;
&lt;li&gt;西梅尼斯：万物之源必定是“空气”或“气体”&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;他们都认为：宇宙间有一种基本物质是所有事物的源头。&lt;/p&gt;
&lt;p&gt;而帕梅尼德斯认为：没有任何事物会来自虚无，而已经存在的事物中也不会消失于无形。当帕梅尼德斯体会到大自然的恒常变迁，她选择相信自己的理智。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;坚决相信人的理智的态度被称为理性主义。所谓理性主义这就是百分之百相信人类的理智是世间所有只是圆圈的人。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而赫拉克利特斯持相反的观点，他认为：所有的事物都是流动的。他代表了感官的角度。&lt;br&gt;
最后恩培窦可里斯解决了两种观点的矛盾。他认为两者矛盾的根本原因在于两人都认定世间只有一种元素存在。恩培窦可里斯认为：大自然不可能只有一种元素组成。而是四种：土，气，水，火。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安娜萨格拉斯则主张大自然是由无数肉眼看不见的微小粒子所组成，而所有事物都可以被分割成 更小的部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;德莫克里特斯相信每一种事物都是由微笑的积木所组成，而每一块积木都是永恒不变的。他将其称为原子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他其实只能提出这样的答案。他既然接受没有任何事物会改变、没有任何事物来自虚无、没有任何事物会消失的说法，那么大自然必定是由可以聚散的无限小的单位组成的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;古典派哲学家&#34;&gt;古典派哲学家&lt;/h2&gt;
&lt;h3 id=&#34;诡辩学派&#34;&gt;诡辩学派&lt;/h3&gt;
&lt;p&gt;这一派是苏格拉底时代雅典的主流学派。&lt;br&gt;
与自然派哲学不同，&lt;strong&gt;雅典的哲学家的兴趣主要在个人本身与每个人在社会的地位&lt;/strong&gt;。背景是：&lt;strong&gt;公元前450年左右&lt;/strong&gt;，雅典成了希腊王国的文化中心。雅典的人民议会与法庭等机构的的民主制度的逐渐成形。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;诡辩学家与自然派哲学家有一个共通点，那就是：他们都批评传统的神话。但诡辩学家不屑于从事在他们眼中了无益处的哲学性思考。他们的看法是：虽然哲学问题或许有答案，但人类永远不可能揭开大自然及宇宙之谜。在哲学上，**类似这样的看法被称为“怀疑论”。**诡辩派学家认为，我们虽然无法知道所有自然之迷的答案，却可以肯定人类必须学习如何共同生活。因此，他们宁愿关心个人在社会中的地位的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;诡辩学家普罗塔哥拉斯认为：一件事情的对错好坏，完全要看它与人的需求有何关系而定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个无法确定世界上是否有神的人，我们称他为“不可知论者”。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;苏格拉底&#34;&gt;苏格拉底&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;最聪明的是明白自己无知的人&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;真正的智慧来自内心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;苏格拉底式的反讽：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他（苏格拉底）所做的也只不过是提出问题而已，尤其是在刚开始与人谈话时，仿佛他一无所知似的。通常在讨论过程中。他会设法使他的对手承认自己理论上的若带你。最后，到了词穷之际，他们也不得不认清是非与对错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哲学家与智者（或者说诡辩学家）的不同之处在于，意识到自己的无知，并敢于承认。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最具颠覆性的人就是那些提出问题的人，而回答问题则比较不危险。任何一个问题都可能比一千个答案要更具爆炸性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;人辨别是非的能力存在于人的理性之中，而不存在于社会中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;柏拉图&#34;&gt;柏拉图&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公元前427——公元前347年&lt;/strong&gt;&lt;br&gt;
柏拉图关心的是&lt;strong&gt;永恒不变的事物与“流动”事物之间的关系，既包括自然界中也包括在人类社会中。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;坦白说，这正是世间为何要有哲学家的原因。我们需要哲学家，不是因为他们可以为我们选拔美皇后或告诉我们今天番茄最低价。（这是他们为何经常不受欢迎的原因！）哲学家们总是试图避开这类没有永恒价值的热门话题，而努力将人们的注意力吸引到永远“真”、永远“善”、永远“美”的事物上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;属于“物质世界”的每一样东西必然是由某种物质做成。这种物质会受时间侵蚀，但做成这些东西的“模子”或“形式”却是永恒不变的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在“物质世界的背后，必定有一个实在存在。他称这个实在为‘理型的世界’，其中包含存在于自然界各种现象背后、永恒不变的模式。”这种独树一格的观点我们称之为“柏拉图的理型论”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如随着时间的流逝，马可能会变老死去。但新生的马和其他的马的形是一样的。而这个形几位理型的世界。&lt;br&gt;
每一件事物都在流动，但我们可以通过理性来认识这个这个世界。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;柏拉图也相信，自然界所有的现象都只是永恒形式或理型的影子。但大多数人活在影子之间就已经感到心满意足。他们从不去思考是什么东西投射出这些影子。他们认为世间就只有影子，甚至从不曾认清世间万物都只是影子，也因此他们对于自身灵魂不朽的物质从不在意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当看到了无数的理型的影子，却没有去思考其共同点，仅仅觉得是理所当然。那便失去了与自己灵魂接触的机会。&lt;/p&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%A9%B4%E5%AF%93%E8%A8%80&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;洞穴寓言&lt;/a&gt;&lt;br&gt;
另外柏拉图对于男女平等的看法也是很有意义的。&lt;/p&gt;
&lt;h3 id=&#34;亚里士多德&#34;&gt;亚里士多德&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公元前384-322年&lt;/strong&gt;
亚里士多德指出柏拉图所说的理型的世界是不存在的，所谓的理型只是马的特征，最终定义了马这个“种类”。亚里士多德并不赞成鸡的理型比鸡先有的说法。&lt;br&gt;
&lt;strong&gt;一件事物的形式乃是它的特征&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自然界种种循环变迁中也可能有类似的“目的”存在。&lt;br&gt;
天空下雨的原因是因为植物和动物需要雨水才能生长，这就是它所谓的目的因。因此，你可以看出来，亚里士多德赋予雨滴一个任务的目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以现在的眼光来看，亚里士多德的“目的因”说法并不正确。&lt;br&gt;
亚里士多德创建了逻辑学，将自然界中的事物分门别类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亚里士多德提倡所谓的“黄金中庸”。也就是说：人既不能懦弱，也不能太过鲁莽，而要勇敢……柏拉图与亚里士多德两人关于伦理道德的规范使人想起希腊医学的主张：唯有平衡、节制，人才能过着快乐和谐的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;亚里士多德对于政治也有高远的见解。然而亚里士多德也并不完美，他对于女性的看法有很大的错误。&lt;/p&gt;
&lt;h3 id=&#34;希腊文化&#34;&gt;希腊文化&lt;/h3&gt;
&lt;p&gt;书中主要讲的是**公元前四世纪末——公元四百年左右中世纪初期&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般而言，近古时期的特色就是充满了宗教质疑、文化解体与悲观主义。当时的人说：“世界已经衰老了。”希腊文化时期形成的各宗教信仰有一个共同的特征，就是他们经常教导人应该如何获得救赎，免于一死。这些教义通常都是以秘密的方式传授。信徒只要接受这些教导，并进行某些仪式，就可望获得不朽的灵魂与永远的生命。但为了达成灵魂的救赎，除了举行宗教仪式外，也有必要对宇宙真实的本质有某种程度的了解。 关于新宗教，我们就谈到这里了。不过在这个时期，哲学也逐渐朝“救赎”与平安的方向发展。当时的人认为，哲学的智慧不仅本身有其好处，也应该能使人类脱离悲观的心态与对死亡的恐惧。因此，宗教与哲学之间的界线逐渐消失了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;希腊哲学仍旧致力于解决苏格拉底、柏拉图与亚里士多德等人提出的问题。他们都同样亟欲找寻人类最佳的生、死之道。他们关心人的伦理与道德。在这个新的文明中，这个问题成为哲学家研讨的重心。他们最关心的乃是何谓真正的幸福以及如何获致这种幸福。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;犬儒学派&#34;&gt;犬儒学派&lt;/h4&gt;
&lt;p&gt;真正的幸福不依赖于那些稍纵即逝的东西，每个人都可获致幸福，更重要的是，一旦获得了幸福，就不可能失去它。&lt;br&gt;
个人认为这就像时鸵鸟把自己的头埋进沙子中去，假装那些不幸福的事情不存在。这难道不是一种自我欺骗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;犬儒学派相信，人无须担心自己的健康，不应该因生来病死而苦恼，&lt;strong&gt;也不必担心别人的痛苦而让自己活受罪。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“犬儒主义”今天的意思变成对人类真诚的轻蔑不信，暗含对别人的痛苦无动于衷的态度和行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;斯多葛学派&#34;&gt;斯多葛学派&lt;/h4&gt;
&lt;p&gt;每个人都是宇宙常识的一小部分，每个人都像是一个小宇宙。&lt;br&gt;
宇宙间有公理存在，不会随时空而改变。这与苏格拉底相同，与诡辩学派相异。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;斯多葛学派除了否认个人与宇宙有别之外，也不认为“精神”与“物质”之间有任何冲突。他们主张宇宙间只有一个大自然。&amp;gt;这种想法被称为“一元论”（monism），与柏拉图明显的“二元论”（dualism）或“双重实在论”正好相反。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;斯多葛学派强调，所有的自然现象，如生病与死亡，都只是遵守大自然不变的法则罢了，因此人必须学习接受自己的命运。没有任何事物是偶然发生的，每一件事物发生都有其必要性，因此当命运来敲你家大门时，抱怨也没有用。他们认为，我们也不能为生活中一些欢乐的事物所动。在这方面，他们的观点与犬儒学派相似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他们看到了对于死亡对于一切生命的必然性，看到了祸福相依的哲理。与老子的哲学有几分相似。&lt;/p&gt;
&lt;h4 id=&#34;人本主义&#34;&gt;人本主义&lt;/h4&gt;
&lt;p&gt;所谓“人本主义”（一种主张以个人为人类生活重心的哲学）就是由他创立的。若干年后，同为斯多葛学派的塞尼卡（公元前四～公元六五年）表示：“对人类而言，人是神圣的。”这句话自此成为人本主义的口号。&lt;/p&gt;
&lt;h4 id=&#34;伊比鸠鲁学派&#34;&gt;伊比鸠鲁学派&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;公元前341——公元前270&lt;/strong&gt;&lt;br&gt;
苏格拉底的弟子阿瑞斯提普斯提出享乐主义，之后伊壁鸠鲁将其加以发展并与德莫克里特斯的原子论结合起来产生了伊比鸠鲁学派。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如上所述,，苏格拉底关心的是人如何过着良好的生活，犬儒学派与斯多葛学派将他的哲学解释成“人不能沉溺于物质上的享受。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;伊比鸠鲁强调，所谓“乐趣”并不一定指感官上的快乐，如吃巧克力等。交朋友与欣赏艺术等也是一种乐趣。此外，我们若要活得快乐，必须遵守古希腊人自我规范、节制与平和等原则。自我的欲望必须加以克制，而平和的心境则可以帮助我们忍受痛苦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;享乐主义并不是字面意义上那样只顾享乐。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比鸠鲁以他所谓的“四种药草”来总结他的哲学： “神不足惧，死不足忧，祸苦易忍，福乐易求。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我的印象中，西方人大多都是接受这样的哲学。而东方的哲学大多就如前面两个学派的那样，更多的在于隐忍。过于贪图享乐最后只会陷入空虚，而过分强调隐忍和命运则易被封建统治者歪曲成为自己统治的工具，这可能是我国持续了上千年的封建社会的哲学原因，因为隐忍的哲学，因此资本主义在萌芽后却难以成长壮大。而西方在尝到资本主义的甜头后，便如雨后春笋般成长了起来。从前面也看到了，宗教、哲学（封建迷信不算）、科学其实是密不可分的。而这三者完全决定着人类社会未来的走向。希腊文化由于特殊的历史原因，在特别的历史时期上成为了东西方哲学的交融地，应该说只有将两者的哲学思想结合起来才能获得真正的幸福。&lt;/p&gt;
&lt;h4 id=&#34;新柏拉图派&#34;&gt;新柏拉图派&lt;/h4&gt;
&lt;p&gt;普罗汀（约公元205——270）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵魂受到此一神圣之光的照耀，而物质则位于并不真正存在的黑暗世界，至于自然及的形式则微微受到神圣之光的照射。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;神秘主义&#34;&gt;神秘主义&lt;/h4&gt;
&lt;p&gt;神秘经验是一种与上帝或“天地之心”合而为一的体验。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;他们认为，我们通常所称的“我”事实上并不是真正的“我”。有时在一刹那间，我们可以体验到一个更大的“我”的存在。有些神秘主义者称这个“我”为“上帝”，也有人称之为“天地之心”、“大自然”或“宇宙”。当这种物我交融的情况发生时，神秘主义者觉得他们“失去了自我”，像一滴水落入海洋一般进入上帝之中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人与自然合二为一，成为一体。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>算法笔记2</title>
        <link>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</link>
        <pubDate>Mon, 04 Jan 2021 13:09:11 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</guid>
        <description>&lt;h1 id=&#34;基本数据结构&#34;&gt;基本数据结构&lt;/h1&gt;
&lt;h2 id=&#34;线性结构linear-structure&#34;&gt;线性结构（linear structure）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有序数据项的集合&lt;/li&gt;
&lt;li&gt;每个数据项都有唯一的前驱和后继（第一个和最后一个除外）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据数据项增减的方式构成了数据结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈(Stack)&amp;ndash;仅在表尾进行插入和删除操作的线性表&lt;/li&gt;
&lt;li&gt;队列(Queue)&amp;ndash;只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作&lt;/li&gt;
&lt;li&gt;双端队列(Deque)&amp;ndash;限定插入和删除操作在表的两端进行的线性表&lt;/li&gt;
&lt;li&gt;列表(List)&amp;ndash;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈&#34;&gt;栈&lt;/h2&gt;
&lt;p&gt;进行操作的一端为栈顶，另一端为栈底&lt;br&gt;
栈的特点：&lt;strong&gt;后进先出LIFO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/03/02/3fPlFJ.png&#34; alt=&#34;3fPlFJ.png&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;栈通过python的实现可以借助list的数据类型&lt;/p&gt;
&lt;h2 id=&#34;栈的应用&#34;&gt;栈的应用&lt;/h2&gt;
&lt;h3 id=&#34;括号匹配--基本思路&#34;&gt;括号匹配&amp;ndash;基本思路&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/8psmYd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/03/09/8psmYd.png&#34; alt=&#34;8psmYd.png&#34;  /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;括号匹配与之前图灵机的模型有些相似；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;括号匹配可以用用于爬虫HTML数据的爬取；另外该方法也可通过正则表达式实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十进制与二进制的转换&#34;&gt;十进制与二进制的转换&lt;/h3&gt;
&lt;p&gt;十进制转换二进制是余数的连续求取，并将求得的余数倒过来书写。通过栈后进先出的特性可以实现。&lt;/p&gt;
&lt;p&gt;同时由此可以进行十进制到其他进制的转换。当转换的进制为十一禁进制以上时，可以使用数组来保存其中的字母&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0123456789ABC&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;表达式转换&#34;&gt;表达式转换&lt;/h3&gt;
&lt;p&gt;根据表达式操作符的的位置分为中缀、前缀和后缀，距离操作数最近的操作符先执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;中缀表达式转换为前缀和后缀表达式&lt;br&gt;
将表达式转换为全括号形式，将内部每个运算符移到对应的左括号或右括号处边可以转换为前缀、后缀表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中缀转后缀算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从左到右扫描过程中，采用栈来暂存为处理的操作符，当遇到一个新的操作符，就需要跟栈顶的操作符比较下优先级，再行处理。&lt;/p&gt;
&lt;p&gt;算法流程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从左到右扫描&lt;br&gt;
- 当遇到操作数，直接输出至列表末尾&lt;br&gt;
- 当遇到左括号压入栈顶&lt;br&gt;
- 当遇到右括号，反复弹出栈顶加入至输出列表末尾，直到碰到左括号&lt;br&gt;
- 当遇到操作符，与栈顶其他操作符比较。栈顶操作符高于或等于它，则将输出栈顶的操作符直到优先级低于它&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;后缀表达式的求值&#34;&gt;后缀表达式的求值&lt;/h3&gt;
&lt;p&gt;后缀表达式的操作符在操作数的后面，因此要暂存操作数,直到碰到操作符才进行运算(从这可以利用栈的特性)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在实际运算时，先弹出的时右操作数然后才是左操作数，对于‘-’和‘/’要注意两个操作数的位置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;算法流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建空栈用于暂存操作数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左到右扫面单词列表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是操作数，压入栈顶&lt;/li&gt;
&lt;li&gt;如果是操作符，从栈顶弹出两个操作数，进行计算。（注意操作数的位置）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后扫描结束后，表达式的值被存在栈顶（如果表达式正确，则栈中仅有最后的结果一个元素）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引用&#34;&gt;引用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.icourse163.org/learn/PKU-1206307812&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据结构与算法Python版_中国大学MOOC(慕课)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>算法笔记1</title>
        <link>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01/</link>
        <pubDate>Mon, 04 Jan 2021 13:09:08 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B01/</guid>
        <description>&lt;h1 id=&#34;算法分析&#34;&gt;算法分析&lt;/h1&gt;
&lt;h2 id=&#34;算法和算法复杂性&#34;&gt;算法和算法复杂性&lt;/h2&gt;
&lt;p&gt;可计算的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what：分类问题——树状判定分支&lt;/li&gt;
&lt;li&gt;why： 证明问题——公式序列解决&lt;/li&gt;
&lt;li&gt;how： 或称问题——算法流程解决&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欧几里得算法的python实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;#a,b为要计算的两个数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算复杂性研究的是问题的难度，算法实在资源约束的情况下寻找最优方案。&lt;/p&gt;
&lt;p&gt;不可计算问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;停机问题&lt;/li&gt;
&lt;li&gt;几乎所有无理数都无法通过算法找出任意一位精确数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序与算法的区别&#34;&gt;程序与算法的区别&lt;/h2&gt;
&lt;p&gt;算法是描述问题解决的分布步骤而程序则是通过某种编程语言实现的算法。&lt;br&gt;
算法分析主要是从计算机资源消耗的角度来评判和比较算法。评判的两个标准有两种：算法执行时间和空间（内存或存储空间）。&lt;/p&gt;
&lt;p&gt;利用python的time库中 &lt;code&gt;time.time()&lt;/code&gt;函数可以计算算法的执行时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;time.time()&lt;/code&gt; 是计算从1970到现在的时长，并将值返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于算法运行时间的检测也收到语言性能、机器的性能的影响。&lt;/p&gt;
&lt;h2 id=&#34;大o表示法&#34;&gt;大O表示法&lt;/h2&gt;
&lt;p&gt;一个算法所实施的操作数量或步骤可作为独立于程序/机器的度量指标。&lt;br&gt;
程序设计语言中除与计算资源无关的定义语句外，主要是三种控制流语句和赋值语句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个赋值语句包含了（表达式）计算和（变量）存储两个基本资源。而控制流语句仅起组织语句的作用，并不涉及处理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;算法分析的目标是找出问题规模如何影响执行时间&lt;/p&gt;
&lt;h3 id=&#34;数量级函数&#34;&gt;数量级函数&lt;/h3&gt;
&lt;p&gt;数量级函数描述了T（n）中随着n增加而增加速度最快的主导部分。称作大O表示法记作O(f(n)),其中f(n)表示T(n)中的主导部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;T(n)=5n^2+27n+1005&lt;br&gt;
当n越来越大起主导作用的是5*n^2,其中系数5对n^2的增长速度无影响。因此可以表示为O(n^2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体数据也会影响算法运行时间，如排序算法。此时分为最好，最差和平均状况，主要还是通过平均状况分析性能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/02/03/10fUJO.png&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;大O表示所有上限中最小的那个上限&lt;br&gt;
大Ω表示所有下限中最大的那个下限&lt;br&gt;
如果上下限相同用Θ大表示&lt;/p&gt;
&lt;h2 id=&#34;变位词&#34;&gt;变位词&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;写一个布尔函数，一两个此作为参数，返回两个词是否为变位词&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将每一个单词逐个检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;课程给的代码示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;solu1_example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;pos1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#只要字符中有一个没找到就可以通过32行退出&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;found&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     
           &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;found&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;found&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
               &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
       &lt;span class=&#34;n&#34;&gt;pos1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果将自己一个一个对比，要注意同一个字符在字符串中可能会出现很多次。因此，在判断是找到一个相同时必须要设置为none&lt;/p&gt;
&lt;h3 id=&#34;数量级的计算&#34;&gt;数量级的计算&lt;/h3&gt;
&lt;p&gt;两层循环，外层循环为n次，每次到内层每次循环查找次数为1&amp;ndash;n之间。因此总和为：1/2*(n^2)+1/2*n。所以数量级为O(n^2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排序比较：先将字符串按字母顺序排好，再一一对比&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;solu2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alist1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alist2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;alist1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#列表排序函数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;alist2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alist1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alist2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看似很简单仅有一个循环，但在两个数组排序过程消耗的时间不可忽视。时间运算数量级为O(nlog n)&lt;/p&gt;
&lt;h3 id=&#34;暴力法&#34;&gt;暴力法&lt;/h3&gt;
&lt;p&gt;将S1中的字符进行全排列，然后查看S2是否在其中。&lt;br&gt;
用暴力算法解决时，数量级会以N!的方式增长。&lt;/p&gt;
&lt;h3 id=&#34;计数比较&#34;&gt;计数比较&lt;/h3&gt;
&lt;p&gt;检查26个字母在字符中出现的情况，若两者相同则输出。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ord()&lt;/code&gt;函数：返回字符的Unicode编码值&lt;/p&gt;
&lt;p&gt;T(n)=2n + 26;&lt;br&gt;
因此数量级为O(n);相比之下，该项算法性能较优，然而该算法需要的内存空间较大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;solu4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;#返回一个字符的uincode编码&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stillok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;python数据类型的性能&#34;&gt;Python数据类型的性能&lt;/h1&gt;
&lt;h2 id=&#34;list和dict&#34;&gt;list和dict&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2020/03/02/3WYNM6.png&#34; alt=&#34;3WYNM6.png&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;按索引取值和赋值：由于列表的随机访问特性，均为O(1)&lt;/p&gt;
&lt;p&gt;列表添加append()和_add_()&amp;quot;+&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list.append(v)&amp;ndash;O(1),lst= lst+ [v]&lt;/li&gt;
&lt;li&gt;实行时间为O(n+k),k为所加列表长度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pop的复杂度&#34;&gt;pop的复杂度&lt;/h2&gt;
&lt;p&gt;从尾部移除数组的元素是复杂度为O(1),移除数组中某一元素为O(N)；原因是移除中间元素需要将这个元素后面的元素前移。这是为了保证按索引取值和赋值速度的妥协。&lt;/p&gt;
&lt;p&gt;在列表中in操作复杂度为O(N),字典中为O(1)。&lt;/p&gt;
&lt;h1 id=&#34;引用&#34;&gt;引用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.icourse163.org/learn/PKU-1206307812&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;数据结构与算法Python版_中国大学MOOC(慕课)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>算法笔记0</title>
        <link>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00/</link>
        <pubDate>Mon, 04 Jan 2021 13:09:05 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B00/</guid>
        <description>&lt;h2 id=&#34;抽象数据类型adt&#34;&gt;抽象数据类型（ADT）&lt;/h2&gt;
&lt;p&gt;是对数据进行处理的一种逻辑描述，并不设计如何实现这些处理。&lt;/p&gt;
&lt;h2 id=&#34;递归&#34;&gt;递归&lt;/h2&gt;
&lt;p&gt;编写递归代码要注意的三点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;递归总有一个最简单的情况&amp;mdash;方法的第一条语句总是包含 return 的条件语句。&lt;/li&gt;
&lt;li&gt;递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。&lt;/li&gt;
&lt;li&gt;递归调用的父问题和尝试解决的子问题之间不应该有交集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>《红拂夜奔》</title>
        <link>https://https://abananajuice.github.io/p/%E7%BA%A2%E6%8B%82%E5%A4%9C%E5%A5%94/</link>
        <pubDate>Mon, 04 Jan 2021 13:01:27 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E7%BA%A2%E6%8B%82%E5%A4%9C%E5%A5%94/</guid>
        <description>&lt;p&gt;王小波的书读起来都不是那么的晦涩难懂，但读着读着却好像抓住了一些隐晦的道理，这些看似简单但有耐人寻味。&lt;/p&gt;
&lt;p&gt;这本书越是读到后面越是感觉的一丝丝凄凉。红拂，卫公，王二放荡不羁，心中有着一个诗意的世界。都以为自己可以挣脱一切束缚，却不知早已掉进更大的陷阱中去。卫公和红拂跳出了洛阳城，却又困在长安城中再也无法离开。而和人糟心的是，这是卫公亲手打造的长安城。书中说，这就好比把自己当成猪一样，自己还给自己造了围栏。&lt;/p&gt;
&lt;p&gt;这不禁让我想起:曾经，我天真地以为进入初中，高中，大学，社会就会过得更自由，可以做自己想做的事。但到最后连能体面地活下去都是奢望了。不曾想自己早已变成了那万众韭菜中的一抹绿。 于是，我才明白。人生就像俄罗斯套娃一样，而我一直是在最里面那层。随着你不断的长大，你回发现那束缚一层一层，无穷无尽。即使你能够傲视群雄，仍不能放浪形骸。&lt;/p&gt;
&lt;p&gt;这个世界许多时候真的太糟糕了，甚至各种匪夷所思的事情在各地轮番上演，比任何小说都魔幻。书中的话”一个人只拥有此生此世是不够的，他还应该拥有诗意的世界。”对我来说更像是一种安慰，在世界上唯一能让自己无拘无束的，还是心中的那个世界啊。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>雾</title>
        <link>https://https://abananajuice.github.io/p/%E9%9B%BE/</link>
        <pubDate>Mon, 04 Jan 2021 12:56:41 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/%E9%9B%BE/</guid>
        <description>&lt;p&gt;清晨，街道;&lt;/p&gt;
&lt;p&gt;单车，外套。&lt;/p&gt;
&lt;p&gt;家中的黑猫，&lt;/p&gt;
&lt;p&gt;不辞而别。&lt;/p&gt;
&lt;p&gt;我拼命的寻找，&lt;/p&gt;
&lt;p&gt;却仿佛从未出现。&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Yolo学习笔记＿１</title>
        <link>https://https://abananajuice.github.io/p/yolo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%91/</link>
        <pubDate>Sat, 17 Aug 2019 17:20:47 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/yolo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%91/</guid>
        <description>&lt;h1 id=&#34;yolov3学习笔记&#34;&gt;yolov3学习笔记&lt;/h1&gt;
&lt;h1 id=&#34;基本概念&#34;&gt;基本概念&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;下采样&lt;/strong&gt;即图像缩小；将x*x个像素点取均值换算为一个。&lt;br&gt;
&lt;strong&gt;上采样&lt;/strong&gt;即图像放大，利用插值算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ground truth&lt;/strong&gt;即监督学习中数据标注的正确的范围。也就是标准答案的意思。&lt;br&gt;
&lt;strong&gt;IOU&lt;/strong&gt;预测的范围（bounding box）与ground truth的交集/两者并集&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bounding box(bbox)&lt;/strong&gt; 在目标检测中不仅要知道目标的类别还要知道它的位置。在木变检测中常用&lt;strong&gt;边界框&lt;/strong&gt;来描述目标位置。&lt;br&gt;
&lt;strong&gt;anchor box&lt;/strong&gt;目标检测算法通常会在输入图像中采样大量的区域，然后判断这些区域中是否包含我们感兴趣的目标，并调整区域边缘从而更准确地预测目标的真实边界框（ground-truth bounding box）。不同的模型使用的区域采样方法可能不同。这里我们介绍其中的一种方法：它以每个像素为中心生成多个大小和宽高比（aspect ratio）不同的边界框。这些边界框被称为&lt;strong&gt;锚框（anchor box）&lt;/strong&gt;。(&lt;strong&gt;——动手做深度学习&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;精确率与召回率&lt;/strong&gt;实际上非常简单，精确率是针对我们预测结果而言的，它表示的是预测为正的样本中有多少是真正的正样本。那么预测为正就有两种可能了，一种就是把正类预测为正类(TP)，另一种就是把负类预测为正类(FP)，也就是&lt;br&gt;
P=TP/(TP+FP)&lt;br&gt;
而召回率是针对我们原来的样本而言的，它表示的是样本中的正例有多少被预测正确了。那也有两种可能，一种是把原来的正类预测成正类(TP)，另一种就是把原来的正类预测为负类(FN)。&lt;br&gt;
R=TP/TP+FN&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非极大值抑制&lt;/strong&gt;简称为NMS算法，思想是搜索局部最大值，抑制极大值。&lt;br&gt;
流程如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据置信度得分进行排序&lt;br&gt;
选择置信度最高的比边界框添加到最终输出列表中，将其从边界框列表中删除&lt;br&gt;
计算所有边界框的面积&lt;br&gt;
计算置信度最高的边界框与其它候选框的IoU。&lt;br&gt;
删除IoU大于阈值的边界框&lt;br&gt;
重复上述过程，直至边界框列表为空。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**批标准化(batch normalization)**将分散的数据统一的做法，便与神经网络的学习和优化。normalization 预处理, 使得输入的 x 变化范围不会太大, 让输入值经过激励函数的敏感部分。BN实在每个全连接层之间都进行批数据标准化。(作者：
&lt;img src=&#34;https://pic3.zhimg.com/80/v2-083ca0bcd0749fd0f236a690b50442e6_hd.png&#34; alt=&#34;BN&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;聚类算法httpszhuanlanzhihucomp21387568&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/21387568&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;聚类算法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;聚类算法是根据样本之间的距离来将他们归为一类的，这个距离不是普通的距离，理论上叫做欧氏距离。&lt;br&gt;
一般面向大量的，同时维度在2个或两个以上的样本群。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、在样本中随机选择K个点，作为每个类别的初始中心点，这K是自己定的，假如你想将样本分成3个类K就等于3,4个类K就等于4；&lt;br&gt;
2、计算所有样本离这K个初始中心点的距离并分别进行比较，选出其中最近的距离并把这个样本归到这个初始中心点的类别里，即总共划分成K个类别；&lt;br&gt;
3、舍弃原来的初始中心点，在划分好的K个类别里分别计算出新的中心点，使得这些中心点距离他类别里的所有样本的距离之和最小；&lt;br&gt;
4、判断新获得的中心点是否与旧中心点一样，如不一样则回到第2步，重新计算所有样本离这K个新的中心点的距离并进行比较，选出其中最近的距离并归到这个新的中心点的类别里，继续下面的步奏；如一样则完成，即收敛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;残差网络httpswwwcnblogscomwuliyttaotaop9560205html&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wuliytTaotao/p/9560205.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;残差网络&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;残差&#34;&gt;残差&lt;/h3&gt;
&lt;p&gt;残差：实际观测值与估计值（拟合值）之间的差。如果回归模型正确则残差可以看做误差的观测值。&lt;/p&gt;
&lt;p&gt;理论上，可以训练一个 shallower 网络，然后在这个训练好的 shallower 网络上堆几层 identity mapping（恒等映射） 的层，即输出等于输入的层，构建出一个 deeper 网络。这两个网络（shallower 和 deeper）得到的结果应该是一模一样的.&lt;/p&gt;
&lt;h3 id=&#34;退化问题&#34;&gt;退化问题&lt;/h3&gt;
&lt;p&gt;为什么属于随着层数的增多&lt;strong&gt;训练集&lt;/strong&gt;上的效果变差？&lt;/p&gt;
&lt;p&gt;原因是随着网络越来越深，训练变得原来越难，网络的优化变得越来越难。理论上，越深的网络，效果应该更好；但实际上，由于训练难度，过深的网络会产生退化问题，效果反而不如相对较浅的网络。而残差网络就可以解决这个问题的，残差网络越深，训练集上的效果会越好。（测试集上的效果可能涉及过拟合问题。过拟合问题指的是测试集上的效果和训练集上的效果之间有差距。）&lt;strong&gt;这里要注意到过拟合与退化问题之间的区别&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;残差块&#34;&gt;残差块&lt;/h3&gt;
&lt;p&gt;残差网络是通过加入shortcut connections,变得更容易被优化。包含一个shortcut connection的几层网络被称为一个残差块。shortcut即图中x到
⨁的箭头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img2018.cnblogs.com/blog/1351564/201809/1351564-20180914164307733-889668964.png&#34; alt=&#34;残差块&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;残差块residual-block&#34;&gt;残差块（residual block）&lt;/h3&gt;
&lt;p&gt;𝑥 表示输入，𝐹(𝑥) 表示残差块在第二层激活函数之前的输出，即 𝐹(𝑥)=𝑊2𝜎(𝑊1𝑥)，其中 𝑊1 和 𝑊2 表示第一层和第二层的权重，𝜎 表示 ReLU 激活函数。（这里省略了 bias。）最后残差块的输出是 𝜎(𝐹(𝑥)+𝑥)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;激活函数&lt;/strong&gt;：上层节点的输出与下层节点的输入之间的函数关系。&lt;br&gt;
常用的激活函数有：sigmoid函数，tanh函数，relu函数（这个比较常用）&amp;hellip; &amp;hellip;&lt;/p&gt;
&lt;p&gt;残差块中的网络可以使全连接层也可以是卷积层。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设第二层网络在激活函数之前的输出为 𝐻(𝑥)。如果在该 2 层网络中，最优的输出就是输入 𝑥，那么对于没有 shortcut connection 的网络，就需要将其优化成 𝐻(𝑥)=𝑥；对于有 shortcut connection 的网络，即残差块，最优输出是 𝑥，则只需要将 𝐹(𝑥)=𝐻(𝑥)−𝑥 优化为 0 即可。后者的优化会比前者简单。这也是残差这一叫法的由来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面相当于优化了恒等映射。残差网络可以不是神经网络，用全连接层也可以。&lt;/p&gt;
&lt;h3 id=&#34;为什么残差网络会work&#34;&gt;为什么残差网络会work&lt;/h3&gt;
&lt;p&gt;我们给一个网络不论在中间还是末尾加上一个残差块，并给残差块中的 weights 加上 L2 regularization（weight decay），这样图 1 中 𝐹(𝑥)=0 是很容易的。这种情况下加上一个残差块和不加之前的效果会是一样，所以加上残差块不会使得效果变得差。如果残差块中的隐藏单元学到了一些有用信息，那么它可能比 identity mapping（即 𝐹(𝑥)=0）表现的更好。&lt;/p&gt;
&lt;h2 id=&#34;边界框回归httpsblogcsdnnetzijin0802034articledetails77685438&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zijin0802034/article/details/77685438&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;边界框回归&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于窗口一般使用四维向量(x,y,w,h) 来表示， 分别表示窗口的中心点坐标和宽高。 对于图 2, 红色的框 P 代表原始的Proposal, 绿色的框 G 代表目标的 Ground Truth， 我们的目标是寻找一种关系使得输入原始的窗口 P 经过映射得到一个跟真实窗口 G 更接近的回归窗口Ĝ。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20170831205020797?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemlqaW4wODAyMDM0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;图2&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;边框回归的目的既是：给定(Px,Py,Pw,Ph)(Px,Py,Pw,Ph)寻找一种映射ff， 使得f(Px,Py,Pw,Ph)=(Gx^,Gy^,Gw^,Gh^)f(Px,Py,Pw,Ph)=(Gx^,Gy^,Gw^,Gh^) 并且(Gx^,Gy^,Gw^,Gh^)≈(Gx,Gy,Gw,Gh)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边框回归的方法：平移+尺度缩放&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;yolov1-yolov3httpsblogcsdnnetxd1723138323articledetails82532973&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/xd1723138323/article/details/82532973&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yolov1-yolov3&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&#34;yolov1&#34;&gt;yolov1&lt;/h2&gt;
&lt;h3 id=&#34;检测处理理想&#34;&gt;检测处理理想&lt;/h3&gt;
&lt;p&gt;将输入图片划分为S * S的格子（逻辑区域），如果物体的中心坐标落在某个格子中，那么这个格子就负责检测这个物体（包括bounding box的坐标和类别概率）。每个格子预测B个bounding boxes和B个置信度，这个置信度表示这个格子预测的bounding  boxes包含物体的可信程度，论文作者将置信度定义为 Pr(Object)* IOU。Pr(Object)的值为0或者1，表示存不存在目标物体。&lt;/p&gt;
&lt;p&gt;每一个bounding box包括五个元素，x，y，w，h，confidence。坐标(x，y)表示的是box的中心坐标，并且是相对于格子的边界而言，w和h也是相对于整张图片的宽度和高度而言。置信度预测的值表示预测框和真实框的IOU值。虽然每个格子预测B个bounding box，但是每个格子只预测一组类条件概率，注意这里不是anchor，因为多个bounding box共用了一组class probability(表示的是&lt;strong&gt;先验概率&lt;/strong&gt;)。所以网络架构的最后一层实际预测了B个bouding box和一组类别概率，注意这只是针对于一个格子，所以在不考虑batch size的情况下，实际预测输出长度为S* S*（B*5+C)&lt;/p&gt;
&lt;h3 id=&#34;训练过程&#34;&gt;训练过程&lt;/h3&gt;
&lt;p&gt;对于前面所说bounding box，作者也做了一些处理，将bounding box的w,h除以训练图像的宽度和高度（448*448），使其值在0-1之间。至于bouding box的x,y的实际值意义，作者认为不是相对于整张图片的中心坐标值，而是相对于的对应格子坐标左上边界偏移值，所以x,y的值也在0-1之间，这个地方有些难以理解。&lt;/p&gt;
&lt;p&gt;通过置信度为每一个各自从B个bounding box中筛选一个最终的bounding box。于是每个各自的坐标为（0+x，0+y），（0+x, 1+y）&amp;hellip;&amp;hellip;.&lt;/p&gt;
&lt;p&gt;通过我们设定的置信度阈值使用非极大值抑制方法从这49个bounding box中筛选；还有一种做法就是直接从98个bounding boxes使用非极大值抑制方法筛选。从图片的全局性来考虑，第一种方法更能体现图片的整体性。确定完bounding boxes后，用bounding box坐标值乘以与原图的比例值就可以在原图中框出相应的物体。&lt;/p&gt;
&lt;h2 id=&#34;yolov2&#34;&gt;yolov2&lt;/h2&gt;
&lt;p&gt;1.对数据进行批标准化处理。&lt;/p&gt;
&lt;p&gt;2.High Resolution Classifier:低分辨率训练分类网络，高分辨率训练检测网络，在两个过程见了一个适应性微调。&lt;/p&gt;
&lt;p&gt;3.Convolutional With Anchor Boxes（锚框卷积）：作者去掉了YOLOv1的全连接层，使用anchor boxes来预测bounding boxes，同时也去掉了最后池化层使得最后feature maps的分辨率大一些。与YOLOv1不同的是，YOLOv2为每一个bounding box预测一个类条件概率【YOLOv1中B个bounding box共用一个类条件概率】。在YOLOv1中bounding boxes数目为：S* S*(5* B+C)，而在YOLOv2中bounding box数目为S * S*B（5+C）。使用anchor box没有使精度提升，提高了召回率。&lt;/p&gt;
&lt;p&gt;4.作者采用维度聚类的方法对数据集的真实标签的bounding box进行聚类分析从而确定B的取值。如果用欧式距离来衡量K-means的距离，会使得大的bounding box比小的bounding box产生更大的误差，于是作者调整距离计算公式为：
&lt;img src=&#34;https://private.codecogs.com/gif.latex?%5Cdpi%7B120%7D%20%5Csmall%20d%28box%2Ccentroid%29%3D1-IOU%28box%2Ccentroid%29&#34; alt=&#34;&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;5.13* 13的feature map可以提供足够信息预测较大的物体，但是对于小物体而言提供的信息仍然不够，所以作者提供了一个passthrough层，利用26*26的feature map来预测小物体（可能是受SSD的启发，不同大小的特征图检测不同大小的物体）。&lt;/p&gt;
&lt;p&gt;6.YOLOv2的网络只有卷积层和池化层，所以就可以在训练进行的过程改变feature maps的shape。 为了使得YOLOv2更具鲁棒性，我们让模型能够对不同大小的图片进行训练。在训练过程中，每10个batch就换一组新尺度的图片（这里的新图片指大小不同，图片的其他属性是一样的）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者提出了一种将分类数据集和检测数据集联合训练的方法，在训练的过程，我们将这两类数据集混合，当输入的检测数据集时，反向传播全部的误差损失（YOLOv2的loss），当遇到分类数据集时，只反向传播分类误差损失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;yolov3&#34;&gt;yolov3&lt;/h2&gt;
&lt;p&gt;###　1.边界框预测&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YOLOv3中引入一个&lt;strong&gt;Objectness score&lt;/strong&gt;概念，使用logistic regression为每一个bounding box预测一个Objectness score。将预测的bounding boxes中与真实bounding box重叠最大的bounding box的Objectness score赋值为1，如果这个bounding box与真实bounding box重叠值达到设定的阈值0.5，这个bounding box的损失为0，其同一格子里面的其他bounding box只计算置信度损失，忽略坐标损失和类别损失。(可以认为0.5表示预测的边界框已经能很好地标记框出物体，所以不用计算它的损失。每一个格子中的object由一个预测的bounding box预测。既然已经找到了较好地bounding box，所以同一个格子里面的其他bounding box没有必要计算坐标误差和分类误差，只需要计算置信度误差，用来调整置信度，最理想的效果是这些bounding box的置信度值更新为0）。&lt;br&gt;
这里bounding box是指网络模型预测的confidence，bx，by，bw，bh，计算置信度误差时，用真实标签坐标和预测坐标（bx，by，bw，bh）计算IOU，Objectness score相当于Pr(Object)，所以最终的置信度计算为IOU*Pr（Object）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2类别预测&#34;&gt;2.类别预测&lt;/h3&gt;
&lt;p&gt;类别预测使用了多标签分类（多分类），没有使用softmax，而是对每一个类各自对立地使用了logistic分类器，用binary cross-entroy loss替代softmax loss，这样能较好地处理标签重叠（包含）关系（例如：女人和人）。&lt;/p&gt;
&lt;h3 id=&#34;3交叉尺度多尺度预测&#34;&gt;3.交叉尺度(多尺度)预测&lt;/h3&gt;
&lt;p&gt;YOLOv3预测三种不同尺度的box，每一种尺度预测三个anchor boxes，即N&lt;em&gt;N&lt;/em&gt;(3*(4+1+80))，所以最终的输出是3*【N*N*(3*(4+1+80))】，最前面的3表示三种尺度。3种尺度，3个anchor box，是由聚类数为9决定的，按照一定的顺序（面积从小到大）将这个聚蔟box分配给不同尺度。在YOLOv2中，为了加强对小物体的检测，引入了passthrough层，假设最后提取的feature map的size是13*13，passthrough层的作用是将上层26*26的feature map和最后层13*13的feature map连接，作为网络最后的输出。&lt;/p&gt;
&lt;p&gt;YOLOv3是采用了低分辨率feature map上采用和高分辨率feature map做融合，形成新的feature map层，对新的feature map层单独做预测。这样就是多尺度预测。如果YOLOv3最后一层也是13&lt;em&gt;13的话，那么三个尺度的大小为（13&lt;/em&gt;13，26&lt;em&gt;26，52&lt;/em&gt;52），第三个尺度只用第二个尺度上采样并做融合。值得说明的是：YOLOv2中的多尺度指输入图像的大小不同，YOLOv3的多尺度是指用不同的分辨率的feature map做预测。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##　参考文献：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/24810318&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是批标准化&lt;/a&gt;　　作者：莫烦&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/21387568&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;聚类算法&lt;/a&gt;　　作者：挖数&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/wuliytTaotao/p/9560205.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;残差网络&lt;/a&gt;　　作者：wuliytTaotao&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/zijin0802034/article/details/77685438&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;边框回归(Bounding Box Regression)详解&lt;/a&gt;　　作者：南有乔木NTU&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/xd1723138323/article/details/82532973&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;目标检测之YOLO系列-V1至V3改进详解&lt;/a&gt;　　作者：xd1723138323&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Ubuntu笔记</title>
        <link>https://https://abananajuice.github.io/p/ubuntu%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Sun, 30 Jun 2019 11:00:55 +0800</pubDate>
        
        <guid>https://https://abananajuice.github.io/p/ubuntu%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;这篇笔记会根据情况隔段时间更新一次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;终端操作&#34;&gt;终端操作&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;cd+文件夹名  进入文件夹 可以使用TAB键进行自动补全或选择 &lt;!-- raw HTML omitted --&gt;
cd   ..( 退出几层就加几个..)  退出到上n层路径&lt;br&gt;
ls 显示文件夹中的目录&lt;br&gt;
pwd 显示当前路径&lt;br&gt;
gedit 使用文本编辑器编辑文件&lt;br&gt;
cat 在终端中查看文件（多用做文本文件）&lt;br&gt;
sudo  进入管理员模式（超级用户)&lt;br&gt;
sudo su 进入根用户&lt;br&gt;
nvidia-smi  查看显卡运行状态（A卡没有试过）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在ubuntu中一些文件被写保护，需要更高级权限才能修改，可以在命令前加sudo&lt;/p&gt;
&lt;h2 id=&#34;复制一个文件到指定目录&#34;&gt;复制一个文件到指定目录&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 在桌面上打开终端，输入sudo su&lt;br&gt;
(2) 输入密码，就切换到root用户下&lt;br&gt;
(3) 切换到桌面 命令输入为 cd 桌面&lt;br&gt;
(4) 然后输入复制命令行 cp -r studio.zip /home/androidstudio&lt;br&gt;
(5) 回车 大功告成 可以看看/home/androidstudio目录下是否有studio.zip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作者：飞奔的小付&lt;br&gt;
来源：CSDN&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/feibendexiaoma/article/details/73739319&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;移动文件（假设现在在该文件的目录下）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo mv xxx.xx 新的位置的路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解压文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo unzip opencv-3.3.0.zip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重命名文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo cp 原文件名 新文件名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;软件安装&#34;&gt;软件安装&lt;/h1&gt;
&lt;p&gt;软件安装前一般要先更新软件目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get update&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;升级已有软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt-get upgrade
常用软件安装
&lt;a href=&#34;https://www.jianshu.com/p/f44e1ae080a5&#34;&gt;https://www.jianshu.com/p/f44e1ae080a5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载好网易云音乐安装完成后可能会遇到问题打不开。可以在终端中使用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo netease  TAb(自动补全)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当下在好软件安装包后，也可以在本地安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo sh xxx.sh&lt;br&gt;
dpkg -i xxx.deb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://jingyan.baidu.com/article/335530da98061b19cb41c31d.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;google浏览器安装&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;踩过的坑&#34;&gt;踩过的坑&lt;/h1&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/sannerlittle/article/details/77479656&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;没有声音解决办法&lt;/a&gt;&lt;br&gt;
具体情况是：可以调节音量，但却没有声音
这个问题到现在，我仍旧是每次开机仍要打开文章中所说的软件修改一次
ubuntu和win双系统中无法访问win中的磁盘分区&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo ntfsfix /dev/磁盘号&lt;br&gt;
如sudo ntfsfix /dev/sda6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/u010801439/article/details/79485914&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ubuntu中python2和3共存&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;source activate  [要激活的环境名称]&lt;br&gt;
source deactivate&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://linux.cn/article-5409-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何修复 apt-get update 无法添加新的 CD-ROM 的错误&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;侵权即删&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
